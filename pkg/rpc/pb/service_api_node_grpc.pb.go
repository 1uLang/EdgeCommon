// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: service_api_node.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APINodeServiceClient is the client API for APINodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APINodeServiceClient interface {
	// 创建API节点
	CreateAPINode(ctx context.Context, in *CreateAPINodeRequest, opts ...grpc.CallOption) (*CreateAPINodeResponse, error)
	// 修改API节点
	UpdateAPINode(ctx context.Context, in *UpdateAPINodeRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 删除API节点
	DeleteAPINode(ctx context.Context, in *DeleteAPINodeRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 列出所有可用API节点
	FindAllEnabledAPINodes(ctx context.Context, in *FindAllEnabledAPINodesRequest, opts ...grpc.CallOption) (*FindAllEnabledAPINodesResponse, error)
	// 计算API节点数量
	CountAllEnabledAPINodes(ctx context.Context, in *CountAllEnabledAPINodesRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 计算启用的API节点数量
	CountAllEnabledAndOnAPINodes(ctx context.Context, in *CountAllEnabledAndOnAPINodesRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 列出单页的API节点
	ListEnabledAPINodes(ctx context.Context, in *ListEnabledAPINodesRequest, opts ...grpc.CallOption) (*ListEnabledAPINodesResponse, error)
	// 根据ID查找节点
	FindEnabledAPINode(ctx context.Context, in *FindEnabledAPINodeRequest, opts ...grpc.CallOption) (*FindEnabledAPINodeResponse, error)
	// 获取当前API节点的版本
	FindCurrentAPINodeVersion(ctx context.Context, in *FindCurrentAPINodeVersionRequest, opts ...grpc.CallOption) (*FindCurrentAPINodeVersionResponse, error)
	// 获取当前API节点的信息
	FindCurrentAPINode(ctx context.Context, in *FindCurrentAPINodeRequest, opts ...grpc.CallOption) (*FindCurrentAPINodeResponse, error)
	// 计算使用某个SSL证书的API节点数量
	CountAllEnabledAPINodesWithSSLCertId(ctx context.Context, in *CountAllEnabledAPINodesWithSSLCertIdRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 修改调试模式状态
	DebugAPINode(ctx context.Context, in *DebugAPINodeRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
}

type aPINodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPINodeServiceClient(cc grpc.ClientConnInterface) APINodeServiceClient {
	return &aPINodeServiceClient{cc}
}

func (c *aPINodeServiceClient) CreateAPINode(ctx context.Context, in *CreateAPINodeRequest, opts ...grpc.CallOption) (*CreateAPINodeResponse, error) {
	out := new(CreateAPINodeResponse)
	err := c.cc.Invoke(ctx, "/pb.APINodeService/createAPINode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPINodeServiceClient) UpdateAPINode(ctx context.Context, in *UpdateAPINodeRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.APINodeService/updateAPINode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPINodeServiceClient) DeleteAPINode(ctx context.Context, in *DeleteAPINodeRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.APINodeService/deleteAPINode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPINodeServiceClient) FindAllEnabledAPINodes(ctx context.Context, in *FindAllEnabledAPINodesRequest, opts ...grpc.CallOption) (*FindAllEnabledAPINodesResponse, error) {
	out := new(FindAllEnabledAPINodesResponse)
	err := c.cc.Invoke(ctx, "/pb.APINodeService/findAllEnabledAPINodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPINodeServiceClient) CountAllEnabledAPINodes(ctx context.Context, in *CountAllEnabledAPINodesRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.APINodeService/countAllEnabledAPINodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPINodeServiceClient) CountAllEnabledAndOnAPINodes(ctx context.Context, in *CountAllEnabledAndOnAPINodesRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.APINodeService/countAllEnabledAndOnAPINodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPINodeServiceClient) ListEnabledAPINodes(ctx context.Context, in *ListEnabledAPINodesRequest, opts ...grpc.CallOption) (*ListEnabledAPINodesResponse, error) {
	out := new(ListEnabledAPINodesResponse)
	err := c.cc.Invoke(ctx, "/pb.APINodeService/listEnabledAPINodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPINodeServiceClient) FindEnabledAPINode(ctx context.Context, in *FindEnabledAPINodeRequest, opts ...grpc.CallOption) (*FindEnabledAPINodeResponse, error) {
	out := new(FindEnabledAPINodeResponse)
	err := c.cc.Invoke(ctx, "/pb.APINodeService/findEnabledAPINode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPINodeServiceClient) FindCurrentAPINodeVersion(ctx context.Context, in *FindCurrentAPINodeVersionRequest, opts ...grpc.CallOption) (*FindCurrentAPINodeVersionResponse, error) {
	out := new(FindCurrentAPINodeVersionResponse)
	err := c.cc.Invoke(ctx, "/pb.APINodeService/findCurrentAPINodeVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPINodeServiceClient) FindCurrentAPINode(ctx context.Context, in *FindCurrentAPINodeRequest, opts ...grpc.CallOption) (*FindCurrentAPINodeResponse, error) {
	out := new(FindCurrentAPINodeResponse)
	err := c.cc.Invoke(ctx, "/pb.APINodeService/findCurrentAPINode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPINodeServiceClient) CountAllEnabledAPINodesWithSSLCertId(ctx context.Context, in *CountAllEnabledAPINodesWithSSLCertIdRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.APINodeService/countAllEnabledAPINodesWithSSLCertId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPINodeServiceClient) DebugAPINode(ctx context.Context, in *DebugAPINodeRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.APINodeService/debugAPINode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APINodeServiceServer is the server API for APINodeService service.
// All implementations must embed UnimplementedAPINodeServiceServer
// for forward compatibility
type APINodeServiceServer interface {
	// 创建API节点
	CreateAPINode(context.Context, *CreateAPINodeRequest) (*CreateAPINodeResponse, error)
	// 修改API节点
	UpdateAPINode(context.Context, *UpdateAPINodeRequest) (*RPCSuccess, error)
	// 删除API节点
	DeleteAPINode(context.Context, *DeleteAPINodeRequest) (*RPCSuccess, error)
	// 列出所有可用API节点
	FindAllEnabledAPINodes(context.Context, *FindAllEnabledAPINodesRequest) (*FindAllEnabledAPINodesResponse, error)
	// 计算API节点数量
	CountAllEnabledAPINodes(context.Context, *CountAllEnabledAPINodesRequest) (*RPCCountResponse, error)
	// 计算启用的API节点数量
	CountAllEnabledAndOnAPINodes(context.Context, *CountAllEnabledAndOnAPINodesRequest) (*RPCCountResponse, error)
	// 列出单页的API节点
	ListEnabledAPINodes(context.Context, *ListEnabledAPINodesRequest) (*ListEnabledAPINodesResponse, error)
	// 根据ID查找节点
	FindEnabledAPINode(context.Context, *FindEnabledAPINodeRequest) (*FindEnabledAPINodeResponse, error)
	// 获取当前API节点的版本
	FindCurrentAPINodeVersion(context.Context, *FindCurrentAPINodeVersionRequest) (*FindCurrentAPINodeVersionResponse, error)
	// 获取当前API节点的信息
	FindCurrentAPINode(context.Context, *FindCurrentAPINodeRequest) (*FindCurrentAPINodeResponse, error)
	// 计算使用某个SSL证书的API节点数量
	CountAllEnabledAPINodesWithSSLCertId(context.Context, *CountAllEnabledAPINodesWithSSLCertIdRequest) (*RPCCountResponse, error)
	// 修改调试模式状态
	DebugAPINode(context.Context, *DebugAPINodeRequest) (*RPCSuccess, error)
}

// UnimplementedAPINodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAPINodeServiceServer struct {
}

func (UnimplementedAPINodeServiceServer) CreateAPINode(context.Context, *CreateAPINodeRequest) (*CreateAPINodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPINode not implemented")
}
func (UnimplementedAPINodeServiceServer) UpdateAPINode(context.Context, *UpdateAPINodeRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAPINode not implemented")
}
func (UnimplementedAPINodeServiceServer) DeleteAPINode(context.Context, *DeleteAPINodeRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAPINode not implemented")
}
func (UnimplementedAPINodeServiceServer) FindAllEnabledAPINodes(context.Context, *FindAllEnabledAPINodesRequest) (*FindAllEnabledAPINodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllEnabledAPINodes not implemented")
}
func (UnimplementedAPINodeServiceServer) CountAllEnabledAPINodes(context.Context, *CountAllEnabledAPINodesRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledAPINodes not implemented")
}
func (UnimplementedAPINodeServiceServer) CountAllEnabledAndOnAPINodes(context.Context, *CountAllEnabledAndOnAPINodesRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledAndOnAPINodes not implemented")
}
func (UnimplementedAPINodeServiceServer) ListEnabledAPINodes(context.Context, *ListEnabledAPINodesRequest) (*ListEnabledAPINodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnabledAPINodes not implemented")
}
func (UnimplementedAPINodeServiceServer) FindEnabledAPINode(context.Context, *FindEnabledAPINodeRequest) (*FindEnabledAPINodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledAPINode not implemented")
}
func (UnimplementedAPINodeServiceServer) FindCurrentAPINodeVersion(context.Context, *FindCurrentAPINodeVersionRequest) (*FindCurrentAPINodeVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCurrentAPINodeVersion not implemented")
}
func (UnimplementedAPINodeServiceServer) FindCurrentAPINode(context.Context, *FindCurrentAPINodeRequest) (*FindCurrentAPINodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCurrentAPINode not implemented")
}
func (UnimplementedAPINodeServiceServer) CountAllEnabledAPINodesWithSSLCertId(context.Context, *CountAllEnabledAPINodesWithSSLCertIdRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledAPINodesWithSSLCertId not implemented")
}
func (UnimplementedAPINodeServiceServer) DebugAPINode(context.Context, *DebugAPINodeRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugAPINode not implemented")
}
func RegisterAPINodeServiceServer(s grpc.ServiceRegistrar, srv APINodeServiceServer) {
	s.RegisterService(&APINodeService_ServiceDesc, srv)
}

func _APINodeService_CreateAPINode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAPINodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APINodeServiceServer).CreateAPINode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.APINodeService/createAPINode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APINodeServiceServer).CreateAPINode(ctx, req.(*CreateAPINodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APINodeService_UpdateAPINode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAPINodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APINodeServiceServer).UpdateAPINode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.APINodeService/updateAPINode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APINodeServiceServer).UpdateAPINode(ctx, req.(*UpdateAPINodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APINodeService_DeleteAPINode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAPINodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APINodeServiceServer).DeleteAPINode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.APINodeService/deleteAPINode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APINodeServiceServer).DeleteAPINode(ctx, req.(*DeleteAPINodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APINodeService_FindAllEnabledAPINodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllEnabledAPINodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APINodeServiceServer).FindAllEnabledAPINodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.APINodeService/findAllEnabledAPINodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APINodeServiceServer).FindAllEnabledAPINodes(ctx, req.(*FindAllEnabledAPINodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APINodeService_CountAllEnabledAPINodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledAPINodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APINodeServiceServer).CountAllEnabledAPINodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.APINodeService/countAllEnabledAPINodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APINodeServiceServer).CountAllEnabledAPINodes(ctx, req.(*CountAllEnabledAPINodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APINodeService_CountAllEnabledAndOnAPINodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledAndOnAPINodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APINodeServiceServer).CountAllEnabledAndOnAPINodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.APINodeService/countAllEnabledAndOnAPINodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APINodeServiceServer).CountAllEnabledAndOnAPINodes(ctx, req.(*CountAllEnabledAndOnAPINodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APINodeService_ListEnabledAPINodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnabledAPINodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APINodeServiceServer).ListEnabledAPINodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.APINodeService/listEnabledAPINodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APINodeServiceServer).ListEnabledAPINodes(ctx, req.(*ListEnabledAPINodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APINodeService_FindEnabledAPINode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledAPINodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APINodeServiceServer).FindEnabledAPINode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.APINodeService/findEnabledAPINode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APINodeServiceServer).FindEnabledAPINode(ctx, req.(*FindEnabledAPINodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APINodeService_FindCurrentAPINodeVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCurrentAPINodeVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APINodeServiceServer).FindCurrentAPINodeVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.APINodeService/findCurrentAPINodeVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APINodeServiceServer).FindCurrentAPINodeVersion(ctx, req.(*FindCurrentAPINodeVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APINodeService_FindCurrentAPINode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCurrentAPINodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APINodeServiceServer).FindCurrentAPINode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.APINodeService/findCurrentAPINode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APINodeServiceServer).FindCurrentAPINode(ctx, req.(*FindCurrentAPINodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APINodeService_CountAllEnabledAPINodesWithSSLCertId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledAPINodesWithSSLCertIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APINodeServiceServer).CountAllEnabledAPINodesWithSSLCertId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.APINodeService/countAllEnabledAPINodesWithSSLCertId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APINodeServiceServer).CountAllEnabledAPINodesWithSSLCertId(ctx, req.(*CountAllEnabledAPINodesWithSSLCertIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APINodeService_DebugAPINode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugAPINodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APINodeServiceServer).DebugAPINode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.APINodeService/debugAPINode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APINodeServiceServer).DebugAPINode(ctx, req.(*DebugAPINodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// APINodeService_ServiceDesc is the grpc.ServiceDesc for APINodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APINodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.APINodeService",
	HandlerType: (*APINodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createAPINode",
			Handler:    _APINodeService_CreateAPINode_Handler,
		},
		{
			MethodName: "updateAPINode",
			Handler:    _APINodeService_UpdateAPINode_Handler,
		},
		{
			MethodName: "deleteAPINode",
			Handler:    _APINodeService_DeleteAPINode_Handler,
		},
		{
			MethodName: "findAllEnabledAPINodes",
			Handler:    _APINodeService_FindAllEnabledAPINodes_Handler,
		},
		{
			MethodName: "countAllEnabledAPINodes",
			Handler:    _APINodeService_CountAllEnabledAPINodes_Handler,
		},
		{
			MethodName: "countAllEnabledAndOnAPINodes",
			Handler:    _APINodeService_CountAllEnabledAndOnAPINodes_Handler,
		},
		{
			MethodName: "listEnabledAPINodes",
			Handler:    _APINodeService_ListEnabledAPINodes_Handler,
		},
		{
			MethodName: "findEnabledAPINode",
			Handler:    _APINodeService_FindEnabledAPINode_Handler,
		},
		{
			MethodName: "findCurrentAPINodeVersion",
			Handler:    _APINodeService_FindCurrentAPINodeVersion_Handler,
		},
		{
			MethodName: "findCurrentAPINode",
			Handler:    _APINodeService_FindCurrentAPINode_Handler,
		},
		{
			MethodName: "countAllEnabledAPINodesWithSSLCertId",
			Handler:    _APINodeService_CountAllEnabledAPINodesWithSSLCertId_Handler,
		},
		{
			MethodName: "debugAPINode",
			Handler:    _APINodeService_DebugAPINode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_api_node.proto",
}
