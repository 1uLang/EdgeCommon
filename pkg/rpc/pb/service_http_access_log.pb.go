// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: service_http_access_log.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 创建访问日志
type CreateHTTPAccessLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpAccessLogs []*HTTPAccessLog `protobuf:"bytes,1,rep,name=httpAccessLogs,proto3" json:"httpAccessLogs,omitempty"`
}

func (x *CreateHTTPAccessLogsRequest) Reset() {
	*x = CreateHTTPAccessLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHTTPAccessLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHTTPAccessLogsRequest) ProtoMessage() {}

func (x *CreateHTTPAccessLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHTTPAccessLogsRequest.ProtoReflect.Descriptor instead.
func (*CreateHTTPAccessLogsRequest) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{0}
}

func (x *CreateHTTPAccessLogsRequest) GetHttpAccessLogs() []*HTTPAccessLog {
	if x != nil {
		return x.HttpAccessLogs
	}
	return nil
}

type CreateHTTPAccessLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateHTTPAccessLogsResponse) Reset() {
	*x = CreateHTTPAccessLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHTTPAccessLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHTTPAccessLogsResponse) ProtoMessage() {}

func (x *CreateHTTPAccessLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHTTPAccessLogsResponse.ProtoReflect.Descriptor instead.
func (*CreateHTTPAccessLogsResponse) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{1}
}

// 查找日志分区
type FindHTTPAccessLogPartitionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day string `protobuf:"bytes,1,opt,name=day,proto3" json:"day,omitempty"` // YYYYMMDD
}

func (x *FindHTTPAccessLogPartitionsRequest) Reset() {
	*x = FindHTTPAccessLogPartitionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPAccessLogPartitionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPAccessLogPartitionsRequest) ProtoMessage() {}

func (x *FindHTTPAccessLogPartitionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPAccessLogPartitionsRequest.ProtoReflect.Descriptor instead.
func (*FindHTTPAccessLogPartitionsRequest) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{2}
}

func (x *FindHTTPAccessLogPartitionsRequest) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

type FindHTTPAccessLogPartitionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partitions        []int32 `protobuf:"varint,1,rep,packed,name=partitions,proto3" json:"partitions,omitempty"`
	ReversePartitions []int32 `protobuf:"varint,2,rep,packed,name=reversePartitions,proto3" json:"reversePartitions,omitempty"`
}

func (x *FindHTTPAccessLogPartitionsResponse) Reset() {
	*x = FindHTTPAccessLogPartitionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPAccessLogPartitionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPAccessLogPartitionsResponse) ProtoMessage() {}

func (x *FindHTTPAccessLogPartitionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPAccessLogPartitionsResponse.ProtoReflect.Descriptor instead.
func (*FindHTTPAccessLogPartitionsResponse) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{3}
}

func (x *FindHTTPAccessLogPartitionsResponse) GetPartitions() []int32 {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *FindHTTPAccessLogPartitionsResponse) GetReversePartitions() []int32 {
	if x != nil {
		return x.ReversePartitions
	}
	return nil
}

// 列出往前的单页访问日志
type ListHTTPAccessLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId           string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`                      // 上一页请求ID，可选
	ServerId            int64  `protobuf:"varint,2,opt,name=serverId,proto3" json:"serverId,omitempty"`                       // 服务ID
	Size                int64  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`                               // 单页条数
	Day                 string `protobuf:"bytes,4,opt,name=day,proto3" json:"day,omitempty"`                                  // 日期，格式YYYYMMDD
	HourFrom            string `protobuf:"bytes,17,opt,name=hourFrom,proto3" json:"hourFrom,omitempty"`                       // 开始小时
	HourTo              string `protobuf:"bytes,18,opt,name=hourTo,proto3" json:"hourTo,omitempty"`                           // 结束小时
	Reverse             bool   `protobuf:"varint,5,opt,name=reverse,proto3" json:"reverse,omitempty"`                         // 是否反向查找，可选
	HasError            bool   `protobuf:"varint,6,opt,name=hasError,proto3" json:"hasError,omitempty"`                       // 是否有错误，可选
	FirewallPolicyId    int64  `protobuf:"varint,7,opt,name=firewallPolicyId,proto3" json:"firewallPolicyId,omitempty"`       // WAF策略ID，可选
	FirewallRuleGroupId int64  `protobuf:"varint,8,opt,name=firewallRuleGroupId,proto3" json:"firewallRuleGroupId,omitempty"` // WAF分组ID，可选
	FirewallRuleSetId   int64  `protobuf:"varint,9,opt,name=firewallRuleSetId,proto3" json:"firewallRuleSetId,omitempty"`     // WAF规则集ID，可选
	UserId              int64  `protobuf:"varint,10,opt,name=userId,proto3" json:"userId,omitempty"`                          // 用户ID
	HasFirewallPolicy   bool   `protobuf:"varint,11,opt,name=hasFirewallPolicy,proto3" json:"hasFirewallPolicy,omitempty"`    // 是否有WAF策略
	Keyword             string `protobuf:"bytes,12,opt,name=keyword,proto3" json:"keyword,omitempty"`                         // 关键词
	Ip                  string `protobuf:"bytes,13,opt,name=ip,proto3" json:"ip,omitempty"`
	Domain              string `protobuf:"bytes,14,opt,name=domain,proto3" json:"domain,omitempty"`
	NodeClusterId       int64  `protobuf:"varint,15,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	NodeId              int64  `protobuf:"varint,16,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Partition           int32  `protobuf:"varint,19,opt,name=partition,proto3" json:"partition,omitempty"` // 分区
}

func (x *ListHTTPAccessLogsRequest) Reset() {
	*x = ListHTTPAccessLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHTTPAccessLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHTTPAccessLogsRequest) ProtoMessage() {}

func (x *ListHTTPAccessLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHTTPAccessLogsRequest.ProtoReflect.Descriptor instead.
func (*ListHTTPAccessLogsRequest) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{4}
}

func (x *ListHTTPAccessLogsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ListHTTPAccessLogsRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *ListHTTPAccessLogsRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListHTTPAccessLogsRequest) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *ListHTTPAccessLogsRequest) GetHourFrom() string {
	if x != nil {
		return x.HourFrom
	}
	return ""
}

func (x *ListHTTPAccessLogsRequest) GetHourTo() string {
	if x != nil {
		return x.HourTo
	}
	return ""
}

func (x *ListHTTPAccessLogsRequest) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ListHTTPAccessLogsRequest) GetHasError() bool {
	if x != nil {
		return x.HasError
	}
	return false
}

func (x *ListHTTPAccessLogsRequest) GetFirewallPolicyId() int64 {
	if x != nil {
		return x.FirewallPolicyId
	}
	return 0
}

func (x *ListHTTPAccessLogsRequest) GetFirewallRuleGroupId() int64 {
	if x != nil {
		return x.FirewallRuleGroupId
	}
	return 0
}

func (x *ListHTTPAccessLogsRequest) GetFirewallRuleSetId() int64 {
	if x != nil {
		return x.FirewallRuleSetId
	}
	return 0
}

func (x *ListHTTPAccessLogsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListHTTPAccessLogsRequest) GetHasFirewallPolicy() bool {
	if x != nil {
		return x.HasFirewallPolicy
	}
	return false
}

func (x *ListHTTPAccessLogsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListHTTPAccessLogsRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ListHTTPAccessLogsRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ListHTTPAccessLogsRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *ListHTTPAccessLogsRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *ListHTTPAccessLogsRequest) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

type ListHTTPAccessLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	AccessLogs     []*HTTPAccessLog `protobuf:"bytes,1,rep,name=accessLogs,proto3" json:"accessLogs,omitempty"`
	HttpAccessLogs []*HTTPAccessLog `protobuf:"bytes,4,rep,name=httpAccessLogs,proto3" json:"httpAccessLogs,omitempty"`
	RequestId      string           `protobuf:"bytes,2,opt,name=requestId,proto3" json:"requestId,omitempty"`
	HasMore        bool             `protobuf:"varint,3,opt,name=hasMore,proto3" json:"hasMore,omitempty"`
}

func (x *ListHTTPAccessLogsResponse) Reset() {
	*x = ListHTTPAccessLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHTTPAccessLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHTTPAccessLogsResponse) ProtoMessage() {}

func (x *ListHTTPAccessLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHTTPAccessLogsResponse.ProtoReflect.Descriptor instead.
func (*ListHTTPAccessLogsResponse) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{5}
}

// Deprecated: Do not use.
func (x *ListHTTPAccessLogsResponse) GetAccessLogs() []*HTTPAccessLog {
	if x != nil {
		return x.AccessLogs
	}
	return nil
}

func (x *ListHTTPAccessLogsResponse) GetHttpAccessLogs() []*HTTPAccessLog {
	if x != nil {
		return x.HttpAccessLogs
	}
	return nil
}

func (x *ListHTTPAccessLogsResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ListHTTPAccessLogsResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

// 查找单个日志
type FindHTTPAccessLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
}

func (x *FindHTTPAccessLogRequest) Reset() {
	*x = FindHTTPAccessLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPAccessLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPAccessLogRequest) ProtoMessage() {}

func (x *FindHTTPAccessLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPAccessLogRequest.ProtoReflect.Descriptor instead.
func (*FindHTTPAccessLogRequest) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{6}
}

func (x *FindHTTPAccessLogRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type FindHTTPAccessLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpAccessLog *HTTPAccessLog `protobuf:"bytes,1,opt,name=httpAccessLog,proto3" json:"httpAccessLog,omitempty"`
}

func (x *FindHTTPAccessLogResponse) Reset() {
	*x = FindHTTPAccessLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPAccessLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPAccessLogResponse) ProtoMessage() {}

func (x *FindHTTPAccessLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPAccessLogResponse.ProtoReflect.Descriptor instead.
func (*FindHTTPAccessLogResponse) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{7}
}

func (x *FindHTTPAccessLogResponse) GetHttpAccessLog() *HTTPAccessLog {
	if x != nil {
		return x.HttpAccessLog
	}
	return nil
}

// 列出往前的单页访问日志
type SearchHTTPAccessLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId     string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`          // 上一页请求ID，可选
	ServerId      int64  `protobuf:"varint,2,opt,name=serverId,proto3" json:"serverId,omitempty"`           // 服务ID
	Size          int64  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`                   // 单页条数
	Day           string `protobuf:"bytes,4,opt,name=day,proto3" json:"day,omitempty"`                      // 日期，格式YYYYMMDD
	UserId        int64  `protobuf:"varint,5,opt,name=userId,proto3" json:"userId,omitempty"`               // 用户ID
	Ip            string `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`                        //攻击ip
	Domain        string `protobuf:"bytes,7,opt,name=domain,proto3" json:"domain,omitempty"`                //被攻击域名
	StartAt       uint64 `protobuf:"varint,8,opt,name=startAt,proto3" json:"startAt,omitempty"`             //起始时间
	EndAt         uint64 `protobuf:"varint,9,opt,name=endAt,proto3" json:"endAt,omitempty"`                 //结束时间
	Code          string `protobuf:"bytes,10,opt,name=code,proto3" json:"code,omitempty"`                   //攻击类型code
	HasAll        bool   `protobuf:"varint,11,opt,name=hasAll,proto3" json:"hasAll,omitempty"`              //所有访问日志
	HasError      bool   `protobuf:"varint,12,opt,name=hasError,proto3" json:"hasError,omitempty"`          //错误日志
	RequestMethod string `protobuf:"bytes,13,opt,name=requestMethod,proto3" json:"requestMethod,omitempty"` //请求方式
	Keyword       string `protobuf:"bytes,14,opt,name=keyword,proto3" json:"keyword,omitempty"`             // 关键词
}

func (x *SearchHTTPAccessLogsRequest) Reset() {
	*x = SearchHTTPAccessLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchHTTPAccessLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchHTTPAccessLogsRequest) ProtoMessage() {}

func (x *SearchHTTPAccessLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchHTTPAccessLogsRequest.ProtoReflect.Descriptor instead.
func (*SearchHTTPAccessLogsRequest) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{8}
}

func (x *SearchHTTPAccessLogsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SearchHTTPAccessLogsRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *SearchHTTPAccessLogsRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchHTTPAccessLogsRequest) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *SearchHTTPAccessLogsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SearchHTTPAccessLogsRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *SearchHTTPAccessLogsRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *SearchHTTPAccessLogsRequest) GetStartAt() uint64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *SearchHTTPAccessLogsRequest) GetEndAt() uint64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *SearchHTTPAccessLogsRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SearchHTTPAccessLogsRequest) GetHasAll() bool {
	if x != nil {
		return x.HasAll
	}
	return false
}

func (x *SearchHTTPAccessLogsRequest) GetHasError() bool {
	if x != nil {
		return x.HasError
	}
	return false
}

func (x *SearchHTTPAccessLogsRequest) GetRequestMethod() string {
	if x != nil {
		return x.RequestMethod
	}
	return ""
}

func (x *SearchHTTPAccessLogsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type SearchHTTPAccessLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	AccessLogs     []*HTTPAccessLog `protobuf:"bytes,1,rep,name=accessLogs,proto3" json:"accessLogs,omitempty"`
	HttpAccessLogs []*HTTPAccessLog `protobuf:"bytes,4,rep,name=httpAccessLogs,proto3" json:"httpAccessLogs,omitempty"`
	RequestId      string           `protobuf:"bytes,2,opt,name=requestId,proto3" json:"requestId,omitempty"`
	HasMore        bool             `protobuf:"varint,3,opt,name=hasMore,proto3" json:"hasMore,omitempty"`
}

func (x *SearchHTTPAccessLogsResponse) Reset() {
	*x = SearchHTTPAccessLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchHTTPAccessLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchHTTPAccessLogsResponse) ProtoMessage() {}

func (x *SearchHTTPAccessLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchHTTPAccessLogsResponse.ProtoReflect.Descriptor instead.
func (*SearchHTTPAccessLogsResponse) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{9}
}

// Deprecated: Do not use.
func (x *SearchHTTPAccessLogsResponse) GetAccessLogs() []*HTTPAccessLog {
	if x != nil {
		return x.AccessLogs
	}
	return nil
}

func (x *SearchHTTPAccessLogsResponse) GetHttpAccessLogs() []*HTTPAccessLog {
	if x != nil {
		return x.HttpAccessLogs
	}
	return nil
}

func (x *SearchHTTPAccessLogsResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SearchHTTPAccessLogsResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type StatisticsHTTPAccessTopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day  string `protobuf:"bytes,1,opt,name=day,proto3" json:"day,omitempty"`    //查询日期
	User int64  `protobuf:"varint,2,opt,name=user,proto3" json:"user,omitempty"` //用户id
	Top  int32  `protobuf:"varint,3,opt,name=top,proto3" json:"top,omitempty"`   //排行前几
}

func (x *StatisticsHTTPAccessTopRequest) Reset() {
	*x = StatisticsHTTPAccessTopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsHTTPAccessTopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsHTTPAccessTopRequest) ProtoMessage() {}

func (x *StatisticsHTTPAccessTopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsHTTPAccessTopRequest.ProtoReflect.Descriptor instead.
func (*StatisticsHTTPAccessTopRequest) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{10}
}

func (x *StatisticsHTTPAccessTopRequest) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *StatisticsHTTPAccessTopRequest) GetUser() int64 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *StatisticsHTTPAccessTopRequest) GetTop() int32 {
	if x != nil {
		return x.Top
	}
	return 0
}

type StatisticsHTTPAccessTopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats []*StatisticsHTTPAccess `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"` //攻击
}

func (x *StatisticsHTTPAccessTopResponse) Reset() {
	*x = StatisticsHTTPAccessTopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsHTTPAccessTopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsHTTPAccessTopResponse) ProtoMessage() {}

func (x *StatisticsHTTPAccessTopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsHTTPAccessTopResponse.ProtoReflect.Descriptor instead.
func (*StatisticsHTTPAccessTopResponse) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{11}
}

func (x *StatisticsHTTPAccessTopResponse) GetStats() []*StatisticsHTTPAccess {
	if x != nil {
		return x.Stats
	}
	return nil
}

type StatisticsHTTPAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip       *AccessTop `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`              //ip排名
	Region   *AccessTop `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`      //区域排名
	Total    int64      `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`       //总数
	ServerId int64      `protobuf:"varint,4,opt,name=serverId,proto3" json:"serverId,omitempty"` // 服务ID
}

func (x *StatisticsHTTPAccess) Reset() {
	*x = StatisticsHTTPAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsHTTPAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsHTTPAccess) ProtoMessage() {}

func (x *StatisticsHTTPAccess) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsHTTPAccess.ProtoReflect.Descriptor instead.
func (*StatisticsHTTPAccess) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{12}
}

func (x *StatisticsHTTPAccess) GetIp() *AccessTop {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *StatisticsHTTPAccess) GetRegion() *AccessTop {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *StatisticsHTTPAccess) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *StatisticsHTTPAccess) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type AccessTop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names  []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`           //值
	Counts []int64  `protobuf:"varint,2,rep,packed,name=counts,proto3" json:"counts,omitempty"` //次数
}

func (x *AccessTop) Reset() {
	*x = AccessTop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessTop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessTop) ProtoMessage() {}

func (x *AccessTop) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessTop.ProtoReflect.Descriptor instead.
func (*AccessTop) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{13}
}

func (x *AccessTop) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *AccessTop) GetCounts() []int64 {
	if x != nil {
		return x.Counts
	}
	return nil
}

type StatisticsHTTPAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Days []string `protobuf:"bytes,1,rep,name=days,proto3" json:"days,omitempty"`  //查询日期
	User int64    `protobuf:"varint,2,opt,name=user,proto3" json:"user,omitempty"` //用户id
}

func (x *StatisticsHTTPAccessRequest) Reset() {
	*x = StatisticsHTTPAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsHTTPAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsHTTPAccessRequest) ProtoMessage() {}

func (x *StatisticsHTTPAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsHTTPAccessRequest.ProtoReflect.Descriptor instead.
func (*StatisticsHTTPAccessRequest) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{14}
}

func (x *StatisticsHTTPAccessRequest) GetDays() []string {
	if x != nil {
		return x.Days
	}
	return nil
}

func (x *StatisticsHTTPAccessRequest) GetUser() int64 {
	if x != nil {
		return x.User
	}
	return 0
}

type StatisticsHTTPAccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counts []int64 `protobuf:"varint,1,rep,packed,name=counts,proto3" json:"counts,omitempty"` //次数
}

func (x *StatisticsHTTPAccessResponse) Reset() {
	*x = StatisticsHTTPAccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsHTTPAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsHTTPAccessResponse) ProtoMessage() {}

func (x *StatisticsHTTPAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsHTTPAccessResponse.ProtoReflect.Descriptor instead.
func (*StatisticsHTTPAccessResponse) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{15}
}

func (x *StatisticsHTTPAccessResponse) GetCounts() []int64 {
	if x != nil {
		return x.Counts
	}
	return nil
}

type StatisticsHTTPAccessTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day  string `protobuf:"bytes,1,opt,name=day,proto3" json:"day,omitempty"`    //查询日期
	User int64  `protobuf:"varint,2,opt,name=user,proto3" json:"user,omitempty"` //用户id
}

func (x *StatisticsHTTPAccessTypeRequest) Reset() {
	*x = StatisticsHTTPAccessTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsHTTPAccessTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsHTTPAccessTypeRequest) ProtoMessage() {}

func (x *StatisticsHTTPAccessTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsHTTPAccessTypeRequest.ProtoReflect.Descriptor instead.
func (*StatisticsHTTPAccessTypeRequest) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{16}
}

func (x *StatisticsHTTPAccessTypeRequest) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *StatisticsHTTPAccessTypeRequest) GetUser() int64 {
	if x != nil {
		return x.User
	}
	return 0
}

type StatisticsHTTPAccessTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attacks []*HTTPAccessType `protobuf:"bytes,1,rep,name=attacks,proto3" json:"attacks,omitempty"` //攻击
}

func (x *StatisticsHTTPAccessTypeResponse) Reset() {
	*x = StatisticsHTTPAccessTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsHTTPAccessTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsHTTPAccessTypeResponse) ProtoMessage() {}

func (x *StatisticsHTTPAccessTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsHTTPAccessTypeResponse.ProtoReflect.Descriptor instead.
func (*StatisticsHTTPAccessTypeResponse) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{17}
}

func (x *StatisticsHTTPAccessTypeResponse) GetAttacks() []*HTTPAccessType {
	if x != nil {
		return x.Attacks
	}
	return nil
}

type HTTPAccessType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId string `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"` // 服务ID
	Code     string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`         //攻击类型分组code
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`         //攻击类型名称
	Count    int64  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`      //攻击次数
}

func (x *HTTPAccessType) Reset() {
	*x = HTTPAccessType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPAccessType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPAccessType) ProtoMessage() {}

func (x *HTTPAccessType) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPAccessType.ProtoReflect.Descriptor instead.
func (*HTTPAccessType) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{18}
}

func (x *HTTPAccessType) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *HTTPAccessType) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *HTTPAccessType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HTTPAccessType) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type StatisticsHTTPAccessLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attacks []*HTTPAccessStat `protobuf:"bytes,1,rep,name=attacks,proto3" json:"attacks,omitempty"` //攻击
}

func (x *StatisticsHTTPAccessLogResponse) Reset() {
	*x = StatisticsHTTPAccessLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsHTTPAccessLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsHTTPAccessLogResponse) ProtoMessage() {}

func (x *StatisticsHTTPAccessLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsHTTPAccessLogResponse.ProtoReflect.Descriptor instead.
func (*StatisticsHTTPAccessLogResponse) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{19}
}

func (x *StatisticsHTTPAccessLogResponse) GetAttacks() []*HTTPAccessStat {
	if x != nil {
		return x.Attacks
	}
	return nil
}

type HTTPAccessStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId      int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`           // 服务ID
	AccessTotal   int64 `protobuf:"varint,2,opt,name=accessTotal,proto3" json:"accessTotal,omitempty"`     //访问总数
	AttackTotal   int64 `protobuf:"varint,3,opt,name=attackTotal,proto3" json:"attackTotal,omitempty"`     //防护总数
	AccessIpTotal int64 `protobuf:"varint,4,opt,name=accessIpTotal,proto3" json:"accessIpTotal,omitempty"` //访问IP数
	AttackIpTotal int64 `protobuf:"varint,5,opt,name=attackIpTotal,proto3" json:"attackIpTotal,omitempty"` //拦截IP数
}

func (x *HTTPAccessStat) Reset() {
	*x = HTTPAccessStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPAccessStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPAccessStat) ProtoMessage() {}

func (x *HTTPAccessStat) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPAccessStat.ProtoReflect.Descriptor instead.
func (*HTTPAccessStat) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{20}
}

func (x *HTTPAccessStat) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *HTTPAccessStat) GetAccessTotal() int64 {
	if x != nil {
		return x.AccessTotal
	}
	return 0
}

func (x *HTTPAccessStat) GetAttackTotal() int64 {
	if x != nil {
		return x.AttackTotal
	}
	return 0
}

func (x *HTTPAccessStat) GetAccessIpTotal() int64 {
	if x != nil {
		return x.AccessIpTotal
	}
	return 0
}

func (x *HTTPAccessStat) GetAttackIpTotal() int64 {
	if x != nil {
		return x.AttackIpTotal
	}
	return 0
}

type StatisticsHTTPAttackURLTopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attacks []*HTTPAttackURL `protobuf:"bytes,1,rep,name=attacks,proto3" json:"attacks,omitempty"` //攻击
}

func (x *StatisticsHTTPAttackURLTopResponse) Reset() {
	*x = StatisticsHTTPAttackURLTopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsHTTPAttackURLTopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsHTTPAttackURLTopResponse) ProtoMessage() {}

func (x *StatisticsHTTPAttackURLTopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsHTTPAttackURLTopResponse.ProtoReflect.Descriptor instead.
func (*StatisticsHTTPAttackURLTopResponse) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{21}
}

func (x *StatisticsHTTPAttackURLTopResponse) GetAttacks() []*HTTPAttackURL {
	if x != nil {
		return x.Attacks
	}
	return nil
}

type HTTPAttackURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64        `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"` // 服务ID
	Hosts    *AttackCount `protobuf:"bytes,2,opt,name=hosts,proto3" json:"hosts,omitempty"`        //攻击域名 - 次数
	Uris     *AttackCount `protobuf:"bytes,3,opt,name=uris,proto3" json:"uris,omitempty"`          //攻击uri - 次数
}

func (x *HTTPAttackURL) Reset() {
	*x = HTTPAttackURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPAttackURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPAttackURL) ProtoMessage() {}

func (x *HTTPAttackURL) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPAttackURL.ProtoReflect.Descriptor instead.
func (*HTTPAttackURL) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{22}
}

func (x *HTTPAttackURL) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *HTTPAttackURL) GetHosts() *AttackCount {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *HTTPAttackURL) GetUris() *AttackCount {
	if x != nil {
		return x.Uris
	}
	return nil
}

type AttackCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	Counts []int64  `protobuf:"varint,2,rep,packed,name=counts,proto3" json:"counts,omitempty"`
}

func (x *AttackCount) Reset() {
	*x = AttackCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttackCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttackCount) ProtoMessage() {}

func (x *AttackCount) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttackCount.ProtoReflect.Descriptor instead.
func (*AttackCount) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{23}
}

func (x *AttackCount) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *AttackCount) GetCounts() []int64 {
	if x != nil {
		return x.Counts
	}
	return nil
}

type StatisticsHTTPAccessIPTopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Access []*HTTPAccessIP `protobuf:"bytes,1,rep,name=access,proto3" json:"access,omitempty"` //访问
}

func (x *StatisticsHTTPAccessIPTopResponse) Reset() {
	*x = StatisticsHTTPAccessIPTopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsHTTPAccessIPTopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsHTTPAccessIPTopResponse) ProtoMessage() {}

func (x *StatisticsHTTPAccessIPTopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsHTTPAccessIPTopResponse.ProtoReflect.Descriptor instead.
func (*StatisticsHTTPAccessIPTopResponse) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{24}
}

func (x *StatisticsHTTPAccessIPTopResponse) GetAccess() []*HTTPAccessIP {
	if x != nil {
		return x.Access
	}
	return nil
}

type HTTPAccessIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64    `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`  // 服务ID
	Ip       []string `protobuf:"bytes,2,rep,name=ip,proto3" json:"ip,omitempty"`               //访问域名
	Count    []int64  `protobuf:"varint,3,rep,packed,name=count,proto3" json:"count,omitempty"` //攻击次数
}

func (x *HTTPAccessIP) Reset() {
	*x = HTTPAccessIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPAccessIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPAccessIP) ProtoMessage() {}

func (x *HTTPAccessIP) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPAccessIP.ProtoReflect.Descriptor instead.
func (*HTTPAccessIP) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{25}
}

func (x *HTTPAccessIP) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *HTTPAccessIP) GetIp() []string {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *HTTPAccessIP) GetCount() []int64 {
	if x != nil {
		return x.Count
	}
	return nil
}

type StatisticsStatusCodeTopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codes []*StatusCode `protobuf:"bytes,1,rep,name=codes,proto3" json:"codes,omitempty"` //访问
}

func (x *StatisticsStatusCodeTopResponse) Reset() {
	*x = StatisticsStatusCodeTopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsStatusCodeTopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsStatusCodeTopResponse) ProtoMessage() {}

func (x *StatisticsStatusCodeTopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsStatusCodeTopResponse.ProtoReflect.Descriptor instead.
func (*StatisticsStatusCodeTopResponse) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{26}
}

func (x *StatisticsStatusCodeTopResponse) GetCodes() []*StatusCode {
	if x != nil {
		return x.Codes
	}
	return nil
}

type StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64    `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`  // 服务ID
	Code     []uint32 `protobuf:"varint,2,rep,packed,name=code,proto3" json:"code,omitempty"`   //状态码
	Count    []int64  `protobuf:"varint,3,rep,packed,name=count,proto3" json:"count,omitempty"` //次数
}

func (x *StatusCode) Reset() {
	*x = StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusCode) ProtoMessage() {}

func (x *StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusCode.ProtoReflect.Descriptor instead.
func (*StatusCode) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_proto_rawDescGZIP(), []int{27}
}

func (x *StatusCode) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *StatusCode) GetCode() []uint32 {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *StatusCode) GetCount() []int64 {
	if x != nil {
		return x.Count
	}
	return nil
}

var File_service_http_access_log_proto protoreflect.FileDescriptor

var file_service_http_access_log_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x70, 0x62, 0x1a, 0x22, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f,
	0x67, 0x52, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67,
	0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x36, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79, 0x22, 0x73, 0x0a, 0x23, 0x46, 0x69, 0x6e,
	0x64, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd5,
	0x04, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x75, 0x72,
	0x54, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x75, 0x72, 0x54, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61,
	0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61,
	0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x61,
	0x73, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x73, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f,
	0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc6, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x0e,
	0x68, 0x74, 0x74, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x22,
	0x38, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x19, 0x46, 0x69, 0x6e,
	0x64, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67,
	0x52, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x22,
	0xf5, 0x02, 0x0a, 0x1b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x64,
	0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x41, 0x6c, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x41, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x61, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68,
	0x61, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x12,
	0x39, 0x0a, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x0e, 0x68, 0x74, 0x74, 0x70,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4d,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f,
	0x72, 0x65, 0x22, 0x58, 0x0a, 0x1e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x22, 0x51, 0x0a, 0x1f,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x54,
	0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22,
	0x8e, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x54,
	0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x70, 0x52, 0x02, 0x69, 0x70, 0x12, 0x25, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x70, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x39, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x45, 0x0a, 0x1b, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x22, 0x36, 0x0a, 0x1c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x47, 0x0a, 0x1f, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x22, 0x50, 0x0a, 0x20, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x6a, 0x0a, 0x0e, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x4f, 0x0a, 0x1f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48,
	0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x52, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x0e, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x70, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x51, 0x0a, 0x22, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48,
	0x54, 0x54, 0x50, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x54, 0x6f, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x52, 0x07, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x73, 0x22, 0x77, 0x0a, 0x0d, 0x48, 0x54, 0x54, 0x50, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x72, 0x69, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x04, 0x75, 0x72, 0x69, 0x73, 0x22, 0x3d, 0x0a,
	0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x4d, 0x0a, 0x21,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x50, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x50, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x50, 0x0a, 0x0c, 0x48,
	0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x47, 0x0a,
	0x1f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x52, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x9a, 0x09, 0x0a, 0x14, 0x48,
	0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54,
	0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53,
	0x0a, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x54,
	0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x54, 0x54,
	0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x1b, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54,
	0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54,
	0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x6f, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48,
	0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1f, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x62, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x54,
	0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x70, 0x12, 0x22, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x54, 0x54, 0x50, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48,
	0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x54, 0x54, 0x50,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x54, 0x54,
	0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x65, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x54, 0x54,
	0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x54, 0x54, 0x50, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f,
	0x67, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x16,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x55, 0x52, 0x4c, 0x54, 0x6f, 0x70, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x54, 0x54, 0x50, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x62, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x50, 0x54, 0x6f, 0x70, 0x12, 0x22, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x54, 0x54, 0x50, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48,
	0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x50, 0x54, 0x6f, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x22,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x54,
	0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_http_access_log_proto_rawDescOnce sync.Once
	file_service_http_access_log_proto_rawDescData = file_service_http_access_log_proto_rawDesc
)

func file_service_http_access_log_proto_rawDescGZIP() []byte {
	file_service_http_access_log_proto_rawDescOnce.Do(func() {
		file_service_http_access_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_http_access_log_proto_rawDescData)
	})
	return file_service_http_access_log_proto_rawDescData
}

var file_service_http_access_log_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_service_http_access_log_proto_goTypes = []interface{}{
	(*CreateHTTPAccessLogsRequest)(nil),         // 0: pb.CreateHTTPAccessLogsRequest
	(*CreateHTTPAccessLogsResponse)(nil),        // 1: pb.CreateHTTPAccessLogsResponse
	(*FindHTTPAccessLogPartitionsRequest)(nil),  // 2: pb.FindHTTPAccessLogPartitionsRequest
	(*FindHTTPAccessLogPartitionsResponse)(nil), // 3: pb.FindHTTPAccessLogPartitionsResponse
	(*ListHTTPAccessLogsRequest)(nil),           // 4: pb.ListHTTPAccessLogsRequest
	(*ListHTTPAccessLogsResponse)(nil),          // 5: pb.ListHTTPAccessLogsResponse
	(*FindHTTPAccessLogRequest)(nil),            // 6: pb.FindHTTPAccessLogRequest
	(*FindHTTPAccessLogResponse)(nil),           // 7: pb.FindHTTPAccessLogResponse
	(*SearchHTTPAccessLogsRequest)(nil),         // 8: pb.SearchHTTPAccessLogsRequest
	(*SearchHTTPAccessLogsResponse)(nil),        // 9: pb.SearchHTTPAccessLogsResponse
	(*StatisticsHTTPAccessTopRequest)(nil),      // 10: pb.StatisticsHTTPAccessTopRequest
	(*StatisticsHTTPAccessTopResponse)(nil),     // 11: pb.StatisticsHTTPAccessTopResponse
	(*StatisticsHTTPAccess)(nil),                // 12: pb.StatisticsHTTPAccess
	(*AccessTop)(nil),                           // 13: pb.AccessTop
	(*StatisticsHTTPAccessRequest)(nil),         // 14: pb.StatisticsHTTPAccessRequest
	(*StatisticsHTTPAccessResponse)(nil),        // 15: pb.StatisticsHTTPAccessResponse
	(*StatisticsHTTPAccessTypeRequest)(nil),     // 16: pb.StatisticsHTTPAccessTypeRequest
	(*StatisticsHTTPAccessTypeResponse)(nil),    // 17: pb.StatisticsHTTPAccessTypeResponse
	(*HTTPAccessType)(nil),                      // 18: pb.HTTPAccessType
	(*StatisticsHTTPAccessLogResponse)(nil),     // 19: pb.StatisticsHTTPAccessLogResponse
	(*HTTPAccessStat)(nil),                      // 20: pb.HTTPAccessStat
	(*StatisticsHTTPAttackURLTopResponse)(nil),  // 21: pb.StatisticsHTTPAttackURLTopResponse
	(*HTTPAttackURL)(nil),                       // 22: pb.HTTPAttackURL
	(*AttackCount)(nil),                         // 23: pb.attackCount
	(*StatisticsHTTPAccessIPTopResponse)(nil),   // 24: pb.StatisticsHTTPAccessIPTopResponse
	(*HTTPAccessIP)(nil),                        // 25: pb.HTTPAccessIP
	(*StatisticsStatusCodeTopResponse)(nil),     // 26: pb.StatisticsStatusCodeTopResponse
	(*StatusCode)(nil),                          // 27: pb.StatusCode
	(*HTTPAccessLog)(nil),                       // 28: pb.HTTPAccessLog
}
var file_service_http_access_log_proto_depIdxs = []int32{
	28, // 0: pb.CreateHTTPAccessLogsRequest.httpAccessLogs:type_name -> pb.HTTPAccessLog
	28, // 1: pb.ListHTTPAccessLogsResponse.accessLogs:type_name -> pb.HTTPAccessLog
	28, // 2: pb.ListHTTPAccessLogsResponse.httpAccessLogs:type_name -> pb.HTTPAccessLog
	28, // 3: pb.FindHTTPAccessLogResponse.httpAccessLog:type_name -> pb.HTTPAccessLog
	28, // 4: pb.SearchHTTPAccessLogsResponse.accessLogs:type_name -> pb.HTTPAccessLog
	28, // 5: pb.SearchHTTPAccessLogsResponse.httpAccessLogs:type_name -> pb.HTTPAccessLog
	12, // 6: pb.StatisticsHTTPAccessTopResponse.stats:type_name -> pb.StatisticsHTTPAccess
	13, // 7: pb.StatisticsHTTPAccess.ip:type_name -> pb.AccessTop
	13, // 8: pb.StatisticsHTTPAccess.region:type_name -> pb.AccessTop
	18, // 9: pb.StatisticsHTTPAccessTypeResponse.attacks:type_name -> pb.HTTPAccessType
	20, // 10: pb.StatisticsHTTPAccessLogResponse.attacks:type_name -> pb.HTTPAccessStat
	22, // 11: pb.StatisticsHTTPAttackURLTopResponse.attacks:type_name -> pb.HTTPAttackURL
	23, // 12: pb.HTTPAttackURL.hosts:type_name -> pb.attackCount
	23, // 13: pb.HTTPAttackURL.uris:type_name -> pb.attackCount
	25, // 14: pb.StatisticsHTTPAccessIPTopResponse.access:type_name -> pb.HTTPAccessIP
	27, // 15: pb.StatisticsStatusCodeTopResponse.codes:type_name -> pb.StatusCode
	0,  // 16: pb.HTTPAccessLogService.createHTTPAccessLogs:input_type -> pb.CreateHTTPAccessLogsRequest
	4,  // 17: pb.HTTPAccessLogService.listHTTPAccessLogs:input_type -> pb.ListHTTPAccessLogsRequest
	6,  // 18: pb.HTTPAccessLogService.findHTTPAccessLog:input_type -> pb.FindHTTPAccessLogRequest
	2,  // 19: pb.HTTPAccessLogService.findHTTPAccessLogPartitions:input_type -> pb.FindHTTPAccessLogPartitionsRequest
	8,  // 20: pb.HTTPAccessLogService.searchHTTPAccessLogs:input_type -> pb.SearchHTTPAccessLogsRequest
	10, // 21: pb.HTTPAccessLogService.statisticsHTTPAccessTop:input_type -> pb.StatisticsHTTPAccessTopRequest
	14, // 22: pb.HTTPAccessLogService.statisticsHTTPAccess:input_type -> pb.StatisticsHTTPAccessRequest
	16, // 23: pb.HTTPAccessLogService.statisticsHTTPAccessType:input_type -> pb.StatisticsHTTPAccessTypeRequest
	16, // 24: pb.HTTPAccessLogService.StatisticsHTTPAccessLogs:input_type -> pb.StatisticsHTTPAccessTypeRequest
	10, // 25: pb.HTTPAccessLogService.StatisticsAttackURLTop:input_type -> pb.StatisticsHTTPAccessTopRequest
	10, // 26: pb.HTTPAccessLogService.StatisticsAccessIPTop:input_type -> pb.StatisticsHTTPAccessTopRequest
	10, // 27: pb.HTTPAccessLogService.StatusCodeStatistics:input_type -> pb.StatisticsHTTPAccessTopRequest
	1,  // 28: pb.HTTPAccessLogService.createHTTPAccessLogs:output_type -> pb.CreateHTTPAccessLogsResponse
	5,  // 29: pb.HTTPAccessLogService.listHTTPAccessLogs:output_type -> pb.ListHTTPAccessLogsResponse
	7,  // 30: pb.HTTPAccessLogService.findHTTPAccessLog:output_type -> pb.FindHTTPAccessLogResponse
	3,  // 31: pb.HTTPAccessLogService.findHTTPAccessLogPartitions:output_type -> pb.FindHTTPAccessLogPartitionsResponse
	9,  // 32: pb.HTTPAccessLogService.searchHTTPAccessLogs:output_type -> pb.SearchHTTPAccessLogsResponse
	11, // 33: pb.HTTPAccessLogService.statisticsHTTPAccessTop:output_type -> pb.StatisticsHTTPAccessTopResponse
	15, // 34: pb.HTTPAccessLogService.statisticsHTTPAccess:output_type -> pb.StatisticsHTTPAccessResponse
	17, // 35: pb.HTTPAccessLogService.statisticsHTTPAccessType:output_type -> pb.StatisticsHTTPAccessTypeResponse
	19, // 36: pb.HTTPAccessLogService.StatisticsHTTPAccessLogs:output_type -> pb.StatisticsHTTPAccessLogResponse
	21, // 37: pb.HTTPAccessLogService.StatisticsAttackURLTop:output_type -> pb.StatisticsHTTPAttackURLTopResponse
	24, // 38: pb.HTTPAccessLogService.StatisticsAccessIPTop:output_type -> pb.StatisticsHTTPAccessIPTopResponse
	26, // 39: pb.HTTPAccessLogService.StatusCodeStatistics:output_type -> pb.StatisticsStatusCodeTopResponse
	28, // [28:40] is the sub-list for method output_type
	16, // [16:28] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_service_http_access_log_proto_init() }
func file_service_http_access_log_proto_init() {
	if File_service_http_access_log_proto != nil {
		return
	}
	file_models_model_http_access_log_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_http_access_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHTTPAccessLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHTTPAccessLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPAccessLogPartitionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPAccessLogPartitionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHTTPAccessLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHTTPAccessLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPAccessLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPAccessLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchHTTPAccessLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchHTTPAccessLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsHTTPAccessTopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsHTTPAccessTopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsHTTPAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessTop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsHTTPAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsHTTPAccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsHTTPAccessTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsHTTPAccessTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPAccessType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsHTTPAccessLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPAccessStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsHTTPAttackURLTopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPAttackURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttackCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsHTTPAccessIPTopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPAccessIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsStatusCodeTopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_http_access_log_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_http_access_log_proto_goTypes,
		DependencyIndexes: file_service_http_access_log_proto_depIdxs,
		MessageInfos:      file_service_http_access_log_proto_msgTypes,
	}.Build()
	File_service_http_access_log_proto = out.File
	file_service_http_access_log_proto_rawDesc = nil
	file_service_http_access_log_proto_goTypes = nil
	file_service_http_access_log_proto_depIdxs = nil
}
