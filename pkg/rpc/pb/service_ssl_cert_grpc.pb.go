// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: service_ssl_cert.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SSLCertServiceClient is the client API for SSLCertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SSLCertServiceClient interface {
	// 创建Cert
	CreateSSLCert(ctx context.Context, in *CreateSSLCertRequest, opts ...grpc.CallOption) (*CreateSSLCertResponse, error)
	// 修改Cert
	UpdateSSLCert(ctx context.Context, in *UpdateSSLCertRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 删除Cert
	DeleteSSLCert(ctx context.Context, in *DeleteSSLCertRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 查找证书配置
	FindEnabledSSLCertConfig(ctx context.Context, in *FindEnabledSSLCertConfigRequest, opts ...grpc.CallOption) (*FindEnabledSSLCertConfigResponse, error)
	// 计算匹配的Cert数量
	CountSSLCerts(ctx context.Context, in *CountSSLCertRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 列出单页匹配的Cert
	ListSSLCerts(ctx context.Context, in *ListSSLCertsRequest, opts ...grpc.CallOption) (*ListSSLCertsResponse, error)
	// 计算有OCSP错误的证书数量
	CountAllSSLCertsWithOCSPError(ctx context.Context, in *CountAllSSLCertsWithOCSPErrorRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 列出有OCSP错误的证书
	ListSSLCertsWithOCSPError(ctx context.Context, in *ListSSLCertsWithOCSPErrorRequest, opts ...grpc.CallOption) (*ListSSLCertsWithOCSPErrorResponse, error)
	// 忽略一组OCSP证书错误
	IgnoreSSLCertsWithOCSPError(ctx context.Context, in *IgnoreSSLCertsWithOCSPErrorRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 重置一组证书OCSP错误状态
	ResetSSLCertsWithOCSPError(ctx context.Context, in *ResetSSLCertsWithOCSPErrorRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 重置所有证书OCSP错误状态
	ResetAllSSLCertsWithOCSPError(ctx context.Context, in *ResetAllSSLCertsWithOCSPErrorRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 读取证书的OCSP
	ListUpdatedSSLCertOCSP(ctx context.Context, in *ListUpdatedSSLCertOCSPRequest, opts ...grpc.CallOption) (*ListUpdatedSSLCertOCSPResponse, error)
}

type sSLCertServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSSLCertServiceClient(cc grpc.ClientConnInterface) SSLCertServiceClient {
	return &sSLCertServiceClient{cc}
}

func (c *sSLCertServiceClient) CreateSSLCert(ctx context.Context, in *CreateSSLCertRequest, opts ...grpc.CallOption) (*CreateSSLCertResponse, error) {
	out := new(CreateSSLCertResponse)
	err := c.cc.Invoke(ctx, "/pb.SSLCertService/createSSLCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLCertServiceClient) UpdateSSLCert(ctx context.Context, in *UpdateSSLCertRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.SSLCertService/updateSSLCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLCertServiceClient) DeleteSSLCert(ctx context.Context, in *DeleteSSLCertRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.SSLCertService/deleteSSLCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLCertServiceClient) FindEnabledSSLCertConfig(ctx context.Context, in *FindEnabledSSLCertConfigRequest, opts ...grpc.CallOption) (*FindEnabledSSLCertConfigResponse, error) {
	out := new(FindEnabledSSLCertConfigResponse)
	err := c.cc.Invoke(ctx, "/pb.SSLCertService/findEnabledSSLCertConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLCertServiceClient) CountSSLCerts(ctx context.Context, in *CountSSLCertRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.SSLCertService/countSSLCerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLCertServiceClient) ListSSLCerts(ctx context.Context, in *ListSSLCertsRequest, opts ...grpc.CallOption) (*ListSSLCertsResponse, error) {
	out := new(ListSSLCertsResponse)
	err := c.cc.Invoke(ctx, "/pb.SSLCertService/listSSLCerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLCertServiceClient) CountAllSSLCertsWithOCSPError(ctx context.Context, in *CountAllSSLCertsWithOCSPErrorRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.SSLCertService/countAllSSLCertsWithOCSPError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLCertServiceClient) ListSSLCertsWithOCSPError(ctx context.Context, in *ListSSLCertsWithOCSPErrorRequest, opts ...grpc.CallOption) (*ListSSLCertsWithOCSPErrorResponse, error) {
	out := new(ListSSLCertsWithOCSPErrorResponse)
	err := c.cc.Invoke(ctx, "/pb.SSLCertService/listSSLCertsWithOCSPError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLCertServiceClient) IgnoreSSLCertsWithOCSPError(ctx context.Context, in *IgnoreSSLCertsWithOCSPErrorRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.SSLCertService/ignoreSSLCertsWithOCSPError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLCertServiceClient) ResetSSLCertsWithOCSPError(ctx context.Context, in *ResetSSLCertsWithOCSPErrorRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.SSLCertService/resetSSLCertsWithOCSPError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLCertServiceClient) ResetAllSSLCertsWithOCSPError(ctx context.Context, in *ResetAllSSLCertsWithOCSPErrorRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.SSLCertService/resetAllSSLCertsWithOCSPError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLCertServiceClient) ListUpdatedSSLCertOCSP(ctx context.Context, in *ListUpdatedSSLCertOCSPRequest, opts ...grpc.CallOption) (*ListUpdatedSSLCertOCSPResponse, error) {
	out := new(ListUpdatedSSLCertOCSPResponse)
	err := c.cc.Invoke(ctx, "/pb.SSLCertService/listUpdatedSSLCertOCSP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SSLCertServiceServer is the server API for SSLCertService service.
// All implementations must embed UnimplementedSSLCertServiceServer
// for forward compatibility
type SSLCertServiceServer interface {
	// 创建Cert
	CreateSSLCert(context.Context, *CreateSSLCertRequest) (*CreateSSLCertResponse, error)
	// 修改Cert
	UpdateSSLCert(context.Context, *UpdateSSLCertRequest) (*RPCSuccess, error)
	// 删除Cert
	DeleteSSLCert(context.Context, *DeleteSSLCertRequest) (*RPCSuccess, error)
	// 查找证书配置
	FindEnabledSSLCertConfig(context.Context, *FindEnabledSSLCertConfigRequest) (*FindEnabledSSLCertConfigResponse, error)
	// 计算匹配的Cert数量
	CountSSLCerts(context.Context, *CountSSLCertRequest) (*RPCCountResponse, error)
	// 列出单页匹配的Cert
	ListSSLCerts(context.Context, *ListSSLCertsRequest) (*ListSSLCertsResponse, error)
	// 计算有OCSP错误的证书数量
	CountAllSSLCertsWithOCSPError(context.Context, *CountAllSSLCertsWithOCSPErrorRequest) (*RPCCountResponse, error)
	// 列出有OCSP错误的证书
	ListSSLCertsWithOCSPError(context.Context, *ListSSLCertsWithOCSPErrorRequest) (*ListSSLCertsWithOCSPErrorResponse, error)
	// 忽略一组OCSP证书错误
	IgnoreSSLCertsWithOCSPError(context.Context, *IgnoreSSLCertsWithOCSPErrorRequest) (*RPCSuccess, error)
	// 重置一组证书OCSP错误状态
	ResetSSLCertsWithOCSPError(context.Context, *ResetSSLCertsWithOCSPErrorRequest) (*RPCSuccess, error)
	// 重置所有证书OCSP错误状态
	ResetAllSSLCertsWithOCSPError(context.Context, *ResetAllSSLCertsWithOCSPErrorRequest) (*RPCSuccess, error)
	// 读取证书的OCSP
	ListUpdatedSSLCertOCSP(context.Context, *ListUpdatedSSLCertOCSPRequest) (*ListUpdatedSSLCertOCSPResponse, error)
}

// UnimplementedSSLCertServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSSLCertServiceServer struct {
}

func (UnimplementedSSLCertServiceServer) CreateSSLCert(context.Context, *CreateSSLCertRequest) (*CreateSSLCertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSSLCert not implemented")
}
func (UnimplementedSSLCertServiceServer) UpdateSSLCert(context.Context, *UpdateSSLCertRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSSLCert not implemented")
}
func (UnimplementedSSLCertServiceServer) DeleteSSLCert(context.Context, *DeleteSSLCertRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSSLCert not implemented")
}
func (UnimplementedSSLCertServiceServer) FindEnabledSSLCertConfig(context.Context, *FindEnabledSSLCertConfigRequest) (*FindEnabledSSLCertConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledSSLCertConfig not implemented")
}
func (UnimplementedSSLCertServiceServer) CountSSLCerts(context.Context, *CountSSLCertRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountSSLCerts not implemented")
}
func (UnimplementedSSLCertServiceServer) ListSSLCerts(context.Context, *ListSSLCertsRequest) (*ListSSLCertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSSLCerts not implemented")
}
func (UnimplementedSSLCertServiceServer) CountAllSSLCertsWithOCSPError(context.Context, *CountAllSSLCertsWithOCSPErrorRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllSSLCertsWithOCSPError not implemented")
}
func (UnimplementedSSLCertServiceServer) ListSSLCertsWithOCSPError(context.Context, *ListSSLCertsWithOCSPErrorRequest) (*ListSSLCertsWithOCSPErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSSLCertsWithOCSPError not implemented")
}
func (UnimplementedSSLCertServiceServer) IgnoreSSLCertsWithOCSPError(context.Context, *IgnoreSSLCertsWithOCSPErrorRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IgnoreSSLCertsWithOCSPError not implemented")
}
func (UnimplementedSSLCertServiceServer) ResetSSLCertsWithOCSPError(context.Context, *ResetSSLCertsWithOCSPErrorRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetSSLCertsWithOCSPError not implemented")
}
func (UnimplementedSSLCertServiceServer) ResetAllSSLCertsWithOCSPError(context.Context, *ResetAllSSLCertsWithOCSPErrorRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetAllSSLCertsWithOCSPError not implemented")
}
func (UnimplementedSSLCertServiceServer) ListUpdatedSSLCertOCSP(context.Context, *ListUpdatedSSLCertOCSPRequest) (*ListUpdatedSSLCertOCSPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUpdatedSSLCertOCSP not implemented")
}

func RegisterSSLCertServiceServer(s grpc.ServiceRegistrar, srv SSLCertServiceServer) {
	s.RegisterService(&SSLCertService_ServiceDesc, srv)
}

func _SSLCertService_CreateSSLCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSSLCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLCertServiceServer).CreateSSLCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLCertService/createSSLCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLCertServiceServer).CreateSSLCert(ctx, req.(*CreateSSLCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLCertService_UpdateSSLCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSSLCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLCertServiceServer).UpdateSSLCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLCertService/updateSSLCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLCertServiceServer).UpdateSSLCert(ctx, req.(*UpdateSSLCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLCertService_DeleteSSLCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSSLCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLCertServiceServer).DeleteSSLCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLCertService/deleteSSLCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLCertServiceServer).DeleteSSLCert(ctx, req.(*DeleteSSLCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLCertService_FindEnabledSSLCertConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledSSLCertConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLCertServiceServer).FindEnabledSSLCertConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLCertService/findEnabledSSLCertConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLCertServiceServer).FindEnabledSSLCertConfig(ctx, req.(*FindEnabledSSLCertConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLCertService_CountSSLCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountSSLCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLCertServiceServer).CountSSLCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLCertService/countSSLCerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLCertServiceServer).CountSSLCerts(ctx, req.(*CountSSLCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLCertService_ListSSLCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSSLCertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLCertServiceServer).ListSSLCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLCertService/listSSLCerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLCertServiceServer).ListSSLCerts(ctx, req.(*ListSSLCertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLCertService_CountAllSSLCertsWithOCSPError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllSSLCertsWithOCSPErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLCertServiceServer).CountAllSSLCertsWithOCSPError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLCertService/countAllSSLCertsWithOCSPError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLCertServiceServer).CountAllSSLCertsWithOCSPError(ctx, req.(*CountAllSSLCertsWithOCSPErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLCertService_ListSSLCertsWithOCSPError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSSLCertsWithOCSPErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLCertServiceServer).ListSSLCertsWithOCSPError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLCertService/listSSLCertsWithOCSPError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLCertServiceServer).ListSSLCertsWithOCSPError(ctx, req.(*ListSSLCertsWithOCSPErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLCertService_IgnoreSSLCertsWithOCSPError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IgnoreSSLCertsWithOCSPErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLCertServiceServer).IgnoreSSLCertsWithOCSPError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLCertService/ignoreSSLCertsWithOCSPError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLCertServiceServer).IgnoreSSLCertsWithOCSPError(ctx, req.(*IgnoreSSLCertsWithOCSPErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLCertService_ResetSSLCertsWithOCSPError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetSSLCertsWithOCSPErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLCertServiceServer).ResetSSLCertsWithOCSPError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLCertService/resetSSLCertsWithOCSPError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLCertServiceServer).ResetSSLCertsWithOCSPError(ctx, req.(*ResetSSLCertsWithOCSPErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLCertService_ResetAllSSLCertsWithOCSPError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetAllSSLCertsWithOCSPErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLCertServiceServer).ResetAllSSLCertsWithOCSPError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLCertService/resetAllSSLCertsWithOCSPError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLCertServiceServer).ResetAllSSLCertsWithOCSPError(ctx, req.(*ResetAllSSLCertsWithOCSPErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLCertService_ListUpdatedSSLCertOCSP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUpdatedSSLCertOCSPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLCertServiceServer).ListUpdatedSSLCertOCSP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLCertService/listUpdatedSSLCertOCSP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLCertServiceServer).ListUpdatedSSLCertOCSP(ctx, req.(*ListUpdatedSSLCertOCSPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SSLCertService_ServiceDesc is the grpc.ServiceDesc for SSLCertService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SSLCertService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SSLCertService",
	HandlerType: (*SSLCertServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createSSLCert",
			Handler:    _SSLCertService_CreateSSLCert_Handler,
		},
		{
			MethodName: "updateSSLCert",
			Handler:    _SSLCertService_UpdateSSLCert_Handler,
		},
		{
			MethodName: "deleteSSLCert",
			Handler:    _SSLCertService_DeleteSSLCert_Handler,
		},
		{
			MethodName: "findEnabledSSLCertConfig",
			Handler:    _SSLCertService_FindEnabledSSLCertConfig_Handler,
		},
		{
			MethodName: "countSSLCerts",
			Handler:    _SSLCertService_CountSSLCerts_Handler,
		},
		{
			MethodName: "listSSLCerts",
			Handler:    _SSLCertService_ListSSLCerts_Handler,
		},
		{
			MethodName: "countAllSSLCertsWithOCSPError",
			Handler:    _SSLCertService_CountAllSSLCertsWithOCSPError_Handler,
		},
		{
			MethodName: "listSSLCertsWithOCSPError",
			Handler:    _SSLCertService_ListSSLCertsWithOCSPError_Handler,
		},
		{
			MethodName: "ignoreSSLCertsWithOCSPError",
			Handler:    _SSLCertService_IgnoreSSLCertsWithOCSPError_Handler,
		},
		{
			MethodName: "resetSSLCertsWithOCSPError",
			Handler:    _SSLCertService_ResetSSLCertsWithOCSPError_Handler,
		},
		{
			MethodName: "resetAllSSLCertsWithOCSPError",
			Handler:    _SSLCertService_ResetAllSSLCertsWithOCSPError_Handler,
		},
		{
			MethodName: "listUpdatedSSLCertOCSP",
			Handler:    _SSLCertService_ListUpdatedSSLCertOCSP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_ssl_cert.proto",
}
