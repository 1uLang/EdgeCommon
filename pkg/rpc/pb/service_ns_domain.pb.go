// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: service_ns_domain.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 创建单个域名
type CreateNSDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsClusterId      int64   `protobuf:"varint,1,opt,name=nsClusterId,proto3" json:"nsClusterId,omitempty"`                  // 所属集群
	UserId           int64   `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`                            // 所属用户
	Name             string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                 // 域名
	NsDomainGroupIds []int64 `protobuf:"varint,4,rep,packed,name=nsDomainGroupIds,proto3" json:"nsDomainGroupIds,omitempty"` // 域名分组ID
}

func (x *CreateNSDomainRequest) Reset() {
	*x = CreateNSDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNSDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNSDomainRequest) ProtoMessage() {}

func (x *CreateNSDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNSDomainRequest.ProtoReflect.Descriptor instead.
func (*CreateNSDomainRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{0}
}

func (x *CreateNSDomainRequest) GetNsClusterId() int64 {
	if x != nil {
		return x.NsClusterId
	}
	return 0
}

func (x *CreateNSDomainRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateNSDomainRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNSDomainRequest) GetNsDomainGroupIds() []int64 {
	if x != nil {
		return x.NsDomainGroupIds
	}
	return nil
}

type CreateNSDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainId int64 `protobuf:"varint,1,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"`
}

func (x *CreateNSDomainResponse) Reset() {
	*x = CreateNSDomainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNSDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNSDomainResponse) ProtoMessage() {}

func (x *CreateNSDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNSDomainResponse.ProtoReflect.Descriptor instead.
func (*CreateNSDomainResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{1}
}

func (x *CreateNSDomainResponse) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

// 批量创建域名
type CreateNSDomainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsClusterId      int64    `protobuf:"varint,1,opt,name=nsClusterId,proto3" json:"nsClusterId,omitempty"`                  // 所属集群
	UserId           int64    `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`                            // 所属用户
	Names            []string `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty"`                               // 一组域名
	NsDomainGroupIds []int64  `protobuf:"varint,4,rep,packed,name=nsDomainGroupIds,proto3" json:"nsDomainGroupIds,omitempty"` // 域名分组ID
}

func (x *CreateNSDomainsRequest) Reset() {
	*x = CreateNSDomainsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNSDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNSDomainsRequest) ProtoMessage() {}

func (x *CreateNSDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNSDomainsRequest.ProtoReflect.Descriptor instead.
func (*CreateNSDomainsRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{2}
}

func (x *CreateNSDomainsRequest) GetNsClusterId() int64 {
	if x != nil {
		return x.NsClusterId
	}
	return 0
}

func (x *CreateNSDomainsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateNSDomainsRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *CreateNSDomainsRequest) GetNsDomainGroupIds() []int64 {
	if x != nil {
		return x.NsDomainGroupIds
	}
	return nil
}

type CreateNSDomainsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainIds []int64 `protobuf:"varint,1,rep,packed,name=nsDomainIds,proto3" json:"nsDomainIds,omitempty"`
}

func (x *CreateNSDomainsResponse) Reset() {
	*x = CreateNSDomainsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNSDomainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNSDomainsResponse) ProtoMessage() {}

func (x *CreateNSDomainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNSDomainsResponse.ProtoReflect.Descriptor instead.
func (*CreateNSDomainsResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{3}
}

func (x *CreateNSDomainsResponse) GetNsDomainIds() []int64 {
	if x != nil {
		return x.NsDomainIds
	}
	return nil
}

// 修改域名
// 注意：名称不允许修改
type UpdateNSDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainId       int64   `protobuf:"varint,1,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"`
	NsClusterId      int64   `protobuf:"varint,2,opt,name=nsClusterId,proto3" json:"nsClusterId,omitempty"`
	UserId           int64   `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	NsDomainGroupIds []int64 `protobuf:"varint,5,rep,packed,name=nsDomainGroupIds,proto3" json:"nsDomainGroupIds,omitempty"` // 域名分组ID
	IsOn             bool    `protobuf:"varint,4,opt,name=isOn,proto3" json:"isOn,omitempty"`
}

func (x *UpdateNSDomainRequest) Reset() {
	*x = UpdateNSDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNSDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNSDomainRequest) ProtoMessage() {}

func (x *UpdateNSDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNSDomainRequest.ProtoReflect.Descriptor instead.
func (*UpdateNSDomainRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateNSDomainRequest) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

func (x *UpdateNSDomainRequest) GetNsClusterId() int64 {
	if x != nil {
		return x.NsClusterId
	}
	return 0
}

func (x *UpdateNSDomainRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateNSDomainRequest) GetNsDomainGroupIds() []int64 {
	if x != nil {
		return x.NsDomainGroupIds
	}
	return nil
}

func (x *UpdateNSDomainRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

// 修改域名状态
type UpdateNSDomainStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainId int64  `protobuf:"varint,1,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"`
	Status     string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdateNSDomainStatusRequest) Reset() {
	*x = UpdateNSDomainStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNSDomainStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNSDomainStatusRequest) ProtoMessage() {}

func (x *UpdateNSDomainStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNSDomainStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateNSDomainStatusRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateNSDomainStatusRequest) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

func (x *UpdateNSDomainStatusRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// 删除域名
type DeleteNSDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainId int64 `protobuf:"varint,1,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"`
}

func (x *DeleteNSDomainRequest) Reset() {
	*x = DeleteNSDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNSDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNSDomainRequest) ProtoMessage() {}

func (x *DeleteNSDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNSDomainRequest.ProtoReflect.Descriptor instead.
func (*DeleteNSDomainRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteNSDomainRequest) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

// 批量删除域名
type DeleteNSDomainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names  []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	UserId int64    `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"` // 域名所属用户ID
}

func (x *DeleteNSDomainsRequest) Reset() {
	*x = DeleteNSDomainsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNSDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNSDomainsRequest) ProtoMessage() {}

func (x *DeleteNSDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNSDomainsRequest.ProtoReflect.Descriptor instead.
func (*DeleteNSDomainsRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteNSDomainsRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *DeleteNSDomainsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 查找单个域名
type FindNSDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainId int64 `protobuf:"varint,1,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"` // 域名ID
}

func (x *FindNSDomainRequest) Reset() {
	*x = FindNSDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNSDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNSDomainRequest) ProtoMessage() {}

func (x *FindNSDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNSDomainRequest.ProtoReflect.Descriptor instead.
func (*FindNSDomainRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{8}
}

func (x *FindNSDomainRequest) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

type FindNSDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomain *NSDomain `protobuf:"bytes,1,opt,name=nsDomain,proto3" json:"nsDomain,omitempty"`
}

func (x *FindNSDomainResponse) Reset() {
	*x = FindNSDomainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNSDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNSDomainResponse) ProtoMessage() {}

func (x *FindNSDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNSDomainResponse.ProtoReflect.Descriptor instead.
func (*FindNSDomainResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{9}
}

func (x *FindNSDomainResponse) GetNsDomain() *NSDomain {
	if x != nil {
		return x.NsDomain
	}
	return nil
}

// 根据域名名称查找域名
type FindNSDomainWithNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FindNSDomainWithNameRequest) Reset() {
	*x = FindNSDomainWithNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNSDomainWithNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNSDomainWithNameRequest) ProtoMessage() {}

func (x *FindNSDomainWithNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNSDomainWithNameRequest.ProtoReflect.Descriptor instead.
func (*FindNSDomainWithNameRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{10}
}

func (x *FindNSDomainWithNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FindNSDomainWithNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomain *NSDomain `protobuf:"bytes,1,opt,name=nsDomain,proto3" json:"nsDomain,omitempty"`
}

func (x *FindNSDomainWithNameResponse) Reset() {
	*x = FindNSDomainWithNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNSDomainWithNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNSDomainWithNameResponse) ProtoMessage() {}

func (x *FindNSDomainWithNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNSDomainWithNameResponse.ProtoReflect.Descriptor instead.
func (*FindNSDomainWithNameResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{11}
}

func (x *FindNSDomainWithNameResponse) GetNsDomain() *NSDomain {
	if x != nil {
		return x.NsDomain
	}
	return nil
}

// 计算域名数量
type CountAllNSDomainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	NsClusterId     int64  `protobuf:"varint,2,opt,name=nsClusterId,proto3" json:"nsClusterId,omitempty"`
	Keyword         string `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`
	NsDomainGroupId int64  `protobuf:"varint,4,opt,name=nsDomainGroupId,proto3" json:"nsDomainGroupId,omitempty"`
	Status          string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CountAllNSDomainsRequest) Reset() {
	*x = CountAllNSDomainsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllNSDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllNSDomainsRequest) ProtoMessage() {}

func (x *CountAllNSDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllNSDomainsRequest.ProtoReflect.Descriptor instead.
func (*CountAllNSDomainsRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{12}
}

func (x *CountAllNSDomainsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CountAllNSDomainsRequest) GetNsClusterId() int64 {
	if x != nil {
		return x.NsClusterId
	}
	return 0
}

func (x *CountAllNSDomainsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *CountAllNSDomainsRequest) GetNsDomainGroupId() int64 {
	if x != nil {
		return x.NsDomainGroupId
	}
	return 0
}

func (x *CountAllNSDomainsRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// 列出单页域名
type ListNSDomainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	NsClusterId     int64  `protobuf:"varint,2,opt,name=nsClusterId,proto3" json:"nsClusterId,omitempty"`
	Keyword         string `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`
	NsDomainGroupId int64  `protobuf:"varint,6,opt,name=nsDomainGroupId,proto3" json:"nsDomainGroupId,omitempty"`
	Offset          int64  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Size            int64  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListNSDomainsRequest) Reset() {
	*x = ListNSDomainsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNSDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNSDomainsRequest) ProtoMessage() {}

func (x *ListNSDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNSDomainsRequest.ProtoReflect.Descriptor instead.
func (*ListNSDomainsRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{13}
}

func (x *ListNSDomainsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListNSDomainsRequest) GetNsClusterId() int64 {
	if x != nil {
		return x.NsClusterId
	}
	return 0
}

func (x *ListNSDomainsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListNSDomainsRequest) GetNsDomainGroupId() int64 {
	if x != nil {
		return x.NsDomainGroupId
	}
	return 0
}

func (x *ListNSDomainsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListNSDomainsRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListNSDomainsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomains []*NSDomain `protobuf:"bytes,1,rep,name=nsDomains,proto3" json:"nsDomains,omitempty"`
}

func (x *ListNSDomainsResponse) Reset() {
	*x = ListNSDomainsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNSDomainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNSDomainsResponse) ProtoMessage() {}

func (x *ListNSDomainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNSDomainsResponse.ProtoReflect.Descriptor instead.
func (*ListNSDomainsResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{14}
}

func (x *ListNSDomainsResponse) GetNsDomains() []*NSDomain {
	if x != nil {
		return x.NsDomains
	}
	return nil
}

// 根据版本列出一组域名
type ListNSDomainsAfterVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Size    int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListNSDomainsAfterVersionRequest) Reset() {
	*x = ListNSDomainsAfterVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNSDomainsAfterVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNSDomainsAfterVersionRequest) ProtoMessage() {}

func (x *ListNSDomainsAfterVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNSDomainsAfterVersionRequest.ProtoReflect.Descriptor instead.
func (*ListNSDomainsAfterVersionRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{15}
}

func (x *ListNSDomainsAfterVersionRequest) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ListNSDomainsAfterVersionRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListNSDomainsAfterVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomains []*NSDomain `protobuf:"bytes,1,rep,name=nsDomains,proto3" json:"nsDomains,omitempty"`
}

func (x *ListNSDomainsAfterVersionResponse) Reset() {
	*x = ListNSDomainsAfterVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNSDomainsAfterVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNSDomainsAfterVersionResponse) ProtoMessage() {}

func (x *ListNSDomainsAfterVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNSDomainsAfterVersionResponse.ProtoReflect.Descriptor instead.
func (*ListNSDomainsAfterVersionResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{16}
}

func (x *ListNSDomainsAfterVersionResponse) GetNsDomains() []*NSDomain {
	if x != nil {
		return x.NsDomains
	}
	return nil
}

// 查找TSIG配置
type FindNSDomainTSIGRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainId int64 `protobuf:"varint,1,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"`
}

func (x *FindNSDomainTSIGRequest) Reset() {
	*x = FindNSDomainTSIGRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNSDomainTSIGRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNSDomainTSIGRequest) ProtoMessage() {}

func (x *FindNSDomainTSIGRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNSDomainTSIGRequest.ProtoReflect.Descriptor instead.
func (*FindNSDomainTSIGRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{17}
}

func (x *FindNSDomainTSIGRequest) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

type FindNSDomainTSIGResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TsigJSON []byte `protobuf:"bytes,1,opt,name=tsigJSON,proto3" json:"tsigJSON,omitempty"`
}

func (x *FindNSDomainTSIGResponse) Reset() {
	*x = FindNSDomainTSIGResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNSDomainTSIGResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNSDomainTSIGResponse) ProtoMessage() {}

func (x *FindNSDomainTSIGResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNSDomainTSIGResponse.ProtoReflect.Descriptor instead.
func (*FindNSDomainTSIGResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{18}
}

func (x *FindNSDomainTSIGResponse) GetTsigJSON() []byte {
	if x != nil {
		return x.TsigJSON
	}
	return nil
}

// 修改TSIG配置
type UpdateNSDomainTSIGRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainId int64  `protobuf:"varint,1,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"`
	TsigJSON   []byte `protobuf:"bytes,2,opt,name=tsigJSON,proto3" json:"tsigJSON,omitempty"`
}

func (x *UpdateNSDomainTSIGRequest) Reset() {
	*x = UpdateNSDomainTSIGRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNSDomainTSIGRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNSDomainTSIGRequest) ProtoMessage() {}

func (x *UpdateNSDomainTSIGRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNSDomainTSIGRequest.ProtoReflect.Descriptor instead.
func (*UpdateNSDomainTSIGRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateNSDomainTSIGRequest) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

func (x *UpdateNSDomainTSIGRequest) GetTsigJSON() []byte {
	if x != nil {
		return x.TsigJSON
	}
	return nil
}

// 检查一组域名是否在用户账户中存在
type ExistNSDomainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names  []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	UserId int64    `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *ExistNSDomainsRequest) Reset() {
	*x = ExistNSDomainsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistNSDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistNSDomainsRequest) ProtoMessage() {}

func (x *ExistNSDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistNSDomainsRequest.ProtoReflect.Descriptor instead.
func (*ExistNSDomainsRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{20}
}

func (x *ExistNSDomainsRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *ExistNSDomainsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ExistNSDomainsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExistingNames []string `protobuf:"bytes,1,rep,name=existingNames,proto3" json:"existingNames,omitempty"`
}

func (x *ExistNSDomainsResponse) Reset() {
	*x = ExistNSDomainsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistNSDomainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistNSDomainsResponse) ProtoMessage() {}

func (x *ExistNSDomainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistNSDomainsResponse.ProtoReflect.Descriptor instead.
func (*ExistNSDomainsResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{21}
}

func (x *ExistNSDomainsResponse) GetExistingNames() []string {
	if x != nil {
		return x.ExistingNames
	}
	return nil
}

// 检查一组域名是否已通过验证
type ExistVerifiedNSDomainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *ExistVerifiedNSDomainsRequest) Reset() {
	*x = ExistVerifiedNSDomainsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistVerifiedNSDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistVerifiedNSDomainsRequest) ProtoMessage() {}

func (x *ExistVerifiedNSDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistVerifiedNSDomainsRequest.ProtoReflect.Descriptor instead.
func (*ExistVerifiedNSDomainsRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{22}
}

func (x *ExistVerifiedNSDomainsRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type ExistVerifiedNSDomainsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExistingNames []string `protobuf:"bytes,1,rep,name=existingNames,proto3" json:"existingNames,omitempty"`
}

func (x *ExistVerifiedNSDomainsResponse) Reset() {
	*x = ExistVerifiedNSDomainsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistVerifiedNSDomainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistVerifiedNSDomainsResponse) ProtoMessage() {}

func (x *ExistVerifiedNSDomainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistVerifiedNSDomainsResponse.ProtoReflect.Descriptor instead.
func (*ExistVerifiedNSDomainsResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{23}
}

func (x *ExistVerifiedNSDomainsResponse) GetExistingNames() []string {
	if x != nil {
		return x.ExistingNames
	}
	return nil
}

// 获取域名验证信息
type FindNSDomainVerifyingInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainId int64 `protobuf:"varint,1,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"`
}

func (x *FindNSDomainVerifyingInfoRequest) Reset() {
	*x = FindNSDomainVerifyingInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNSDomainVerifyingInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNSDomainVerifyingInfoRequest) ProtoMessage() {}

func (x *FindNSDomainVerifyingInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNSDomainVerifyingInfoRequest.ProtoReflect.Descriptor instead.
func (*FindNSDomainVerifyingInfoRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{24}
}

func (x *FindNSDomainVerifyingInfoRequest) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

type FindNSDomainVerifyingInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txt       string `protobuf:"bytes,1,opt,name=txt,proto3" json:"txt,omitempty"`
	ExpiresAt int64  `protobuf:"varint,2,opt,name=expiresAt,proto3" json:"expiresAt,omitempty"`
	Status    string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *FindNSDomainVerifyingInfoResponse) Reset() {
	*x = FindNSDomainVerifyingInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNSDomainVerifyingInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNSDomainVerifyingInfoResponse) ProtoMessage() {}

func (x *FindNSDomainVerifyingInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNSDomainVerifyingInfoResponse.ProtoReflect.Descriptor instead.
func (*FindNSDomainVerifyingInfoResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{25}
}

func (x *FindNSDomainVerifyingInfoResponse) GetTxt() string {
	if x != nil {
		return x.Txt
	}
	return ""
}

func (x *FindNSDomainVerifyingInfoResponse) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *FindNSDomainVerifyingInfoResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// 验证域名信息
type VerifyNSDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainId int64 `protobuf:"varint,1,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"`
}

func (x *VerifyNSDomainRequest) Reset() {
	*x = VerifyNSDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyNSDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyNSDomainRequest) ProtoMessage() {}

func (x *VerifyNSDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyNSDomainRequest.ProtoReflect.Descriptor instead.
func (*VerifyNSDomainRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{26}
}

func (x *VerifyNSDomainRequest) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

type VerifyNSDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOk         bool   `protobuf:"varint,1,opt,name=isOk,proto3" json:"isOk,omitempty"`                // 是否成功
	ErrorCode    string `protobuf:"bytes,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"`       // 错误代码
	ErrorMessage string `protobuf:"bytes,3,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"` // 错误消息
}

func (x *VerifyNSDomainResponse) Reset() {
	*x = VerifyNSDomainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyNSDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyNSDomainResponse) ProtoMessage() {}

func (x *VerifyNSDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyNSDomainResponse.ProtoReflect.Descriptor instead.
func (*VerifyNSDomainResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{27}
}

func (x *VerifyNSDomainResponse) GetIsOk() bool {
	if x != nil {
		return x.IsOk
	}
	return false
}

func (x *VerifyNSDomainResponse) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *VerifyNSDomainResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_service_ns_domain_proto protoreflect.FileDescriptor

var file_service_ns_domain_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x73, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x1c, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x73, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x22, 0x38, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x6e, 0x73, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x22, 0x3b, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x73, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x22, 0x55, 0x0a, 0x1b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e,
	0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x37, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x53, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x16,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e,
	0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x14, 0x46,
	0x69, 0x6e, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x53, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x08, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x31, 0x0a,
	0x1b, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x48, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x08, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x52, 0x08, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xb0, 0x01, 0x0a, 0x18, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6e,
	0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc0, 0x01,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x73,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x22, 0x43, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x6e, 0x73, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x09, 0x6e, 0x73, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x50, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x4f, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x09,
	0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x09, 0x6e,
	0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x39, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64,
	0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x53, 0x49, 0x47, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x54, 0x53, 0x49, 0x47, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x73, 0x69, 0x67, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x74, 0x73, 0x69, 0x67, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x57, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x53, 0x49,
	0x47, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x73, 0x69, 0x67,
	0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x73, 0x69, 0x67,
	0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x45, 0x0a, 0x15, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x16, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x35, 0x0a, 0x1d, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x53, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0x46, 0x0a, 0x1e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x42, 0x0a, 0x20, 0x46, 0x69,
	0x6e, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x6b,
	0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x37, 0x0a, 0x15, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x16, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4e, 0x53,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73,
	0x4f, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0xb0, 0x0a, 0x0a, 0x0f, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x19, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x14, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x53,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x53, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x3d, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x41, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x17, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c,
	0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x4e, 0x53,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x19,
	0x6c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x66, 0x69, 0x6e, 0x64, 0x4e, 0x53,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x53, 0x49, 0x47, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x53, 0x49, 0x47,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x53, 0x49, 0x47, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x53, 0x49, 0x47, 0x12, 0x1d, 0x2e, 0x70, 0x62,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54,
	0x53, 0x49, 0x47, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x19, 0x2e, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x65, 0x78, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x21, 0x2e,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x19, 0x66, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4e, 0x53, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62,
	0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_ns_domain_proto_rawDescOnce sync.Once
	file_service_ns_domain_proto_rawDescData = file_service_ns_domain_proto_rawDesc
)

func file_service_ns_domain_proto_rawDescGZIP() []byte {
	file_service_ns_domain_proto_rawDescOnce.Do(func() {
		file_service_ns_domain_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_ns_domain_proto_rawDescData)
	})
	return file_service_ns_domain_proto_rawDescData
}

var file_service_ns_domain_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_service_ns_domain_proto_goTypes = []interface{}{
	(*CreateNSDomainRequest)(nil),             // 0: pb.CreateNSDomainRequest
	(*CreateNSDomainResponse)(nil),            // 1: pb.CreateNSDomainResponse
	(*CreateNSDomainsRequest)(nil),            // 2: pb.CreateNSDomainsRequest
	(*CreateNSDomainsResponse)(nil),           // 3: pb.CreateNSDomainsResponse
	(*UpdateNSDomainRequest)(nil),             // 4: pb.UpdateNSDomainRequest
	(*UpdateNSDomainStatusRequest)(nil),       // 5: pb.UpdateNSDomainStatusRequest
	(*DeleteNSDomainRequest)(nil),             // 6: pb.DeleteNSDomainRequest
	(*DeleteNSDomainsRequest)(nil),            // 7: pb.DeleteNSDomainsRequest
	(*FindNSDomainRequest)(nil),               // 8: pb.FindNSDomainRequest
	(*FindNSDomainResponse)(nil),              // 9: pb.FindNSDomainResponse
	(*FindNSDomainWithNameRequest)(nil),       // 10: pb.FindNSDomainWithNameRequest
	(*FindNSDomainWithNameResponse)(nil),      // 11: pb.FindNSDomainWithNameResponse
	(*CountAllNSDomainsRequest)(nil),          // 12: pb.CountAllNSDomainsRequest
	(*ListNSDomainsRequest)(nil),              // 13: pb.ListNSDomainsRequest
	(*ListNSDomainsResponse)(nil),             // 14: pb.ListNSDomainsResponse
	(*ListNSDomainsAfterVersionRequest)(nil),  // 15: pb.ListNSDomainsAfterVersionRequest
	(*ListNSDomainsAfterVersionResponse)(nil), // 16: pb.ListNSDomainsAfterVersionResponse
	(*FindNSDomainTSIGRequest)(nil),           // 17: pb.FindNSDomainTSIGRequest
	(*FindNSDomainTSIGResponse)(nil),          // 18: pb.FindNSDomainTSIGResponse
	(*UpdateNSDomainTSIGRequest)(nil),         // 19: pb.UpdateNSDomainTSIGRequest
	(*ExistNSDomainsRequest)(nil),             // 20: pb.ExistNSDomainsRequest
	(*ExistNSDomainsResponse)(nil),            // 21: pb.ExistNSDomainsResponse
	(*ExistVerifiedNSDomainsRequest)(nil),     // 22: pb.ExistVerifiedNSDomainsRequest
	(*ExistVerifiedNSDomainsResponse)(nil),    // 23: pb.ExistVerifiedNSDomainsResponse
	(*FindNSDomainVerifyingInfoRequest)(nil),  // 24: pb.FindNSDomainVerifyingInfoRequest
	(*FindNSDomainVerifyingInfoResponse)(nil), // 25: pb.FindNSDomainVerifyingInfoResponse
	(*VerifyNSDomainRequest)(nil),             // 26: pb.VerifyNSDomainRequest
	(*VerifyNSDomainResponse)(nil),            // 27: pb.VerifyNSDomainResponse
	(*NSDomain)(nil),                          // 28: pb.NSDomain
	(*RPCSuccess)(nil),                        // 29: pb.RPCSuccess
	(*RPCCountResponse)(nil),                  // 30: pb.RPCCountResponse
}
var file_service_ns_domain_proto_depIdxs = []int32{
	28, // 0: pb.FindNSDomainResponse.nsDomain:type_name -> pb.NSDomain
	28, // 1: pb.FindNSDomainWithNameResponse.nsDomain:type_name -> pb.NSDomain
	28, // 2: pb.ListNSDomainsResponse.nsDomains:type_name -> pb.NSDomain
	28, // 3: pb.ListNSDomainsAfterVersionResponse.nsDomains:type_name -> pb.NSDomain
	0,  // 4: pb.NSDomainService.createNSDomain:input_type -> pb.CreateNSDomainRequest
	2,  // 5: pb.NSDomainService.createNSDomains:input_type -> pb.CreateNSDomainsRequest
	4,  // 6: pb.NSDomainService.updateNSDomain:input_type -> pb.UpdateNSDomainRequest
	5,  // 7: pb.NSDomainService.updateNSDomainStatus:input_type -> pb.UpdateNSDomainStatusRequest
	6,  // 8: pb.NSDomainService.deleteNSDomain:input_type -> pb.DeleteNSDomainRequest
	7,  // 9: pb.NSDomainService.deleteNSDomains:input_type -> pb.DeleteNSDomainsRequest
	8,  // 10: pb.NSDomainService.findNSDomain:input_type -> pb.FindNSDomainRequest
	10, // 11: pb.NSDomainService.findNSDomainWithName:input_type -> pb.FindNSDomainWithNameRequest
	12, // 12: pb.NSDomainService.countAllNSDomains:input_type -> pb.CountAllNSDomainsRequest
	13, // 13: pb.NSDomainService.listNSDomains:input_type -> pb.ListNSDomainsRequest
	15, // 14: pb.NSDomainService.listNSDomainsAfterVersion:input_type -> pb.ListNSDomainsAfterVersionRequest
	17, // 15: pb.NSDomainService.findNSDomainTSIG:input_type -> pb.FindNSDomainTSIGRequest
	19, // 16: pb.NSDomainService.updateNSDomainTSIG:input_type -> pb.UpdateNSDomainTSIGRequest
	20, // 17: pb.NSDomainService.existNSDomains:input_type -> pb.ExistNSDomainsRequest
	22, // 18: pb.NSDomainService.existVerifiedNSDomains:input_type -> pb.ExistVerifiedNSDomainsRequest
	24, // 19: pb.NSDomainService.findNSDomainVerifyingInfo:input_type -> pb.FindNSDomainVerifyingInfoRequest
	26, // 20: pb.NSDomainService.verifyNSDomain:input_type -> pb.VerifyNSDomainRequest
	1,  // 21: pb.NSDomainService.createNSDomain:output_type -> pb.CreateNSDomainResponse
	3,  // 22: pb.NSDomainService.createNSDomains:output_type -> pb.CreateNSDomainsResponse
	29, // 23: pb.NSDomainService.updateNSDomain:output_type -> pb.RPCSuccess
	29, // 24: pb.NSDomainService.updateNSDomainStatus:output_type -> pb.RPCSuccess
	29, // 25: pb.NSDomainService.deleteNSDomain:output_type -> pb.RPCSuccess
	29, // 26: pb.NSDomainService.deleteNSDomains:output_type -> pb.RPCSuccess
	9,  // 27: pb.NSDomainService.findNSDomain:output_type -> pb.FindNSDomainResponse
	11, // 28: pb.NSDomainService.findNSDomainWithName:output_type -> pb.FindNSDomainWithNameResponse
	30, // 29: pb.NSDomainService.countAllNSDomains:output_type -> pb.RPCCountResponse
	14, // 30: pb.NSDomainService.listNSDomains:output_type -> pb.ListNSDomainsResponse
	16, // 31: pb.NSDomainService.listNSDomainsAfterVersion:output_type -> pb.ListNSDomainsAfterVersionResponse
	18, // 32: pb.NSDomainService.findNSDomainTSIG:output_type -> pb.FindNSDomainTSIGResponse
	29, // 33: pb.NSDomainService.updateNSDomainTSIG:output_type -> pb.RPCSuccess
	21, // 34: pb.NSDomainService.existNSDomains:output_type -> pb.ExistNSDomainsResponse
	23, // 35: pb.NSDomainService.existVerifiedNSDomains:output_type -> pb.ExistVerifiedNSDomainsResponse
	25, // 36: pb.NSDomainService.findNSDomainVerifyingInfo:output_type -> pb.FindNSDomainVerifyingInfoResponse
	27, // 37: pb.NSDomainService.verifyNSDomain:output_type -> pb.VerifyNSDomainResponse
	21, // [21:38] is the sub-list for method output_type
	4,  // [4:21] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_service_ns_domain_proto_init() }
func file_service_ns_domain_proto_init() {
	if File_service_ns_domain_proto != nil {
		return
	}
	file_models_model_ns_domain_proto_init()
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_ns_domain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNSDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNSDomainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNSDomainsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNSDomainsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNSDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNSDomainStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNSDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNSDomainsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNSDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNSDomainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNSDomainWithNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNSDomainWithNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllNSDomainsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNSDomainsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNSDomainsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNSDomainsAfterVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNSDomainsAfterVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNSDomainTSIGRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNSDomainTSIGResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNSDomainTSIGRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistNSDomainsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistNSDomainsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistVerifiedNSDomainsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistVerifiedNSDomainsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNSDomainVerifyingInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNSDomainVerifyingInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyNSDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyNSDomainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_ns_domain_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_ns_domain_proto_goTypes,
		DependencyIndexes: file_service_ns_domain_proto_depIdxs,
		MessageInfos:      file_service_ns_domain_proto_msgTypes,
	}.Build()
	File_service_ns_domain_proto = out.File
	file_service_ns_domain_proto_rawDesc = nil
	file_service_ns_domain_proto_goTypes = nil
	file_service_ns_domain_proto_depIdxs = nil
}
