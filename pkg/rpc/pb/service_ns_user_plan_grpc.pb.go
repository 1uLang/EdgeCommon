// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: service_ns_user_plan.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NSUserPlanServiceClient is the client API for NSUserPlanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NSUserPlanServiceClient interface {
	// 创建用户套餐
	CreateNSUserPlan(ctx context.Context, in *CreateNSUserPlanRequest, opts ...grpc.CallOption) (*CreateNSUserPlanResponse, error)
	// 修改用户套餐
	UpdateNSUserPlan(ctx context.Context, in *UpdateNSUserPlanRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 删除用户套餐
	DeleteNSUserPlan(ctx context.Context, in *DeleteNSUserPlanRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 读取用户套餐
	FindNSUserPlan(ctx context.Context, in *FindNSUserPlanRequest, opts ...grpc.CallOption) (*FindNSUserPlanResponse, error)
	// 计算用户套餐数量
	CountNSUserPlans(ctx context.Context, in *CountNSUserPlansRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 列出单页套餐
	ListNSUserPlans(ctx context.Context, in *ListNSUserPlansRequest, opts ...grpc.CallOption) (*ListNSUserPlansResponse, error)
}

type nSUserPlanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNSUserPlanServiceClient(cc grpc.ClientConnInterface) NSUserPlanServiceClient {
	return &nSUserPlanServiceClient{cc}
}

func (c *nSUserPlanServiceClient) CreateNSUserPlan(ctx context.Context, in *CreateNSUserPlanRequest, opts ...grpc.CallOption) (*CreateNSUserPlanResponse, error) {
	out := new(CreateNSUserPlanResponse)
	err := c.cc.Invoke(ctx, "/pb.NSUserPlanService/createNSUserPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSUserPlanServiceClient) UpdateNSUserPlan(ctx context.Context, in *UpdateNSUserPlanRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.NSUserPlanService/updateNSUserPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSUserPlanServiceClient) DeleteNSUserPlan(ctx context.Context, in *DeleteNSUserPlanRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.NSUserPlanService/deleteNSUserPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSUserPlanServiceClient) FindNSUserPlan(ctx context.Context, in *FindNSUserPlanRequest, opts ...grpc.CallOption) (*FindNSUserPlanResponse, error) {
	out := new(FindNSUserPlanResponse)
	err := c.cc.Invoke(ctx, "/pb.NSUserPlanService/findNSUserPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSUserPlanServiceClient) CountNSUserPlans(ctx context.Context, in *CountNSUserPlansRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.NSUserPlanService/countNSUserPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSUserPlanServiceClient) ListNSUserPlans(ctx context.Context, in *ListNSUserPlansRequest, opts ...grpc.CallOption) (*ListNSUserPlansResponse, error) {
	out := new(ListNSUserPlansResponse)
	err := c.cc.Invoke(ctx, "/pb.NSUserPlanService/listNSUserPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NSUserPlanServiceServer is the server API for NSUserPlanService service.
// All implementations must embed UnimplementedNSUserPlanServiceServer
// for forward compatibility
type NSUserPlanServiceServer interface {
	// 创建用户套餐
	CreateNSUserPlan(context.Context, *CreateNSUserPlanRequest) (*CreateNSUserPlanResponse, error)
	// 修改用户套餐
	UpdateNSUserPlan(context.Context, *UpdateNSUserPlanRequest) (*RPCSuccess, error)
	// 删除用户套餐
	DeleteNSUserPlan(context.Context, *DeleteNSUserPlanRequest) (*RPCSuccess, error)
	// 读取用户套餐
	FindNSUserPlan(context.Context, *FindNSUserPlanRequest) (*FindNSUserPlanResponse, error)
	// 计算用户套餐数量
	CountNSUserPlans(context.Context, *CountNSUserPlansRequest) (*RPCCountResponse, error)
	// 列出单页套餐
	ListNSUserPlans(context.Context, *ListNSUserPlansRequest) (*ListNSUserPlansResponse, error)
}

// UnimplementedNSUserPlanServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNSUserPlanServiceServer struct {
}

func (UnimplementedNSUserPlanServiceServer) CreateNSUserPlan(context.Context, *CreateNSUserPlanRequest) (*CreateNSUserPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNSUserPlan not implemented")
}
func (UnimplementedNSUserPlanServiceServer) UpdateNSUserPlan(context.Context, *UpdateNSUserPlanRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNSUserPlan not implemented")
}
func (UnimplementedNSUserPlanServiceServer) DeleteNSUserPlan(context.Context, *DeleteNSUserPlanRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNSUserPlan not implemented")
}
func (UnimplementedNSUserPlanServiceServer) FindNSUserPlan(context.Context, *FindNSUserPlanRequest) (*FindNSUserPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNSUserPlan not implemented")
}
func (UnimplementedNSUserPlanServiceServer) CountNSUserPlans(context.Context, *CountNSUserPlansRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountNSUserPlans not implemented")
}
func (UnimplementedNSUserPlanServiceServer) ListNSUserPlans(context.Context, *ListNSUserPlansRequest) (*ListNSUserPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNSUserPlans not implemented")
}
func RegisterNSUserPlanServiceServer(s grpc.ServiceRegistrar, srv NSUserPlanServiceServer) {
	s.RegisterService(&NSUserPlanService_ServiceDesc, srv)
}

func _NSUserPlanService_CreateNSUserPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNSUserPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSUserPlanServiceServer).CreateNSUserPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSUserPlanService/createNSUserPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSUserPlanServiceServer).CreateNSUserPlan(ctx, req.(*CreateNSUserPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSUserPlanService_UpdateNSUserPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNSUserPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSUserPlanServiceServer).UpdateNSUserPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSUserPlanService/updateNSUserPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSUserPlanServiceServer).UpdateNSUserPlan(ctx, req.(*UpdateNSUserPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSUserPlanService_DeleteNSUserPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNSUserPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSUserPlanServiceServer).DeleteNSUserPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSUserPlanService/deleteNSUserPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSUserPlanServiceServer).DeleteNSUserPlan(ctx, req.(*DeleteNSUserPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSUserPlanService_FindNSUserPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNSUserPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSUserPlanServiceServer).FindNSUserPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSUserPlanService/findNSUserPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSUserPlanServiceServer).FindNSUserPlan(ctx, req.(*FindNSUserPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSUserPlanService_CountNSUserPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountNSUserPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSUserPlanServiceServer).CountNSUserPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSUserPlanService/countNSUserPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSUserPlanServiceServer).CountNSUserPlans(ctx, req.(*CountNSUserPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSUserPlanService_ListNSUserPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNSUserPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSUserPlanServiceServer).ListNSUserPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSUserPlanService/listNSUserPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSUserPlanServiceServer).ListNSUserPlans(ctx, req.(*ListNSUserPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NSUserPlanService_ServiceDesc is the grpc.ServiceDesc for NSUserPlanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NSUserPlanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NSUserPlanService",
	HandlerType: (*NSUserPlanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createNSUserPlan",
			Handler:    _NSUserPlanService_CreateNSUserPlan_Handler,
		},
		{
			MethodName: "updateNSUserPlan",
			Handler:    _NSUserPlanService_UpdateNSUserPlan_Handler,
		},
		{
			MethodName: "deleteNSUserPlan",
			Handler:    _NSUserPlanService_DeleteNSUserPlan_Handler,
		},
		{
			MethodName: "findNSUserPlan",
			Handler:    _NSUserPlanService_FindNSUserPlan_Handler,
		},
		{
			MethodName: "countNSUserPlans",
			Handler:    _NSUserPlanService_CountNSUserPlans_Handler,
		},
		{
			MethodName: "listNSUserPlans",
			Handler:    _NSUserPlanService_ListNSUserPlans_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_ns_user_plan.proto",
}
