// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: service_authority_key.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorityKeyServiceClient is the client API for AuthorityKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorityKeyServiceClient interface {
	// 设置Key
	UpdateAuthorityKey(ctx context.Context, in *UpdateAuthorityKeyRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 读取Key
	ReadAuthorityKey(ctx context.Context, in *ReadAuthorityKeyRequest, opts ...grpc.CallOption) (*ReadAuthorityKeyResponse, error)
	// 重置Key
	ResetAuthorityKey(ctx context.Context, in *ResetAuthorityKeyRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 校验Key
	ValidateAuthorityKey(ctx context.Context, in *ValidateAuthorityKeyRequest, opts ...grpc.CallOption) (*ValidateAuthorityKeyResponse, error)
}

type authorityKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorityKeyServiceClient(cc grpc.ClientConnInterface) AuthorityKeyServiceClient {
	return &authorityKeyServiceClient{cc}
}

func (c *authorityKeyServiceClient) UpdateAuthorityKey(ctx context.Context, in *UpdateAuthorityKeyRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.AuthorityKeyService/updateAuthorityKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityKeyServiceClient) ReadAuthorityKey(ctx context.Context, in *ReadAuthorityKeyRequest, opts ...grpc.CallOption) (*ReadAuthorityKeyResponse, error) {
	out := new(ReadAuthorityKeyResponse)
	err := c.cc.Invoke(ctx, "/pb.AuthorityKeyService/readAuthorityKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityKeyServiceClient) ResetAuthorityKey(ctx context.Context, in *ResetAuthorityKeyRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.AuthorityKeyService/resetAuthorityKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityKeyServiceClient) ValidateAuthorityKey(ctx context.Context, in *ValidateAuthorityKeyRequest, opts ...grpc.CallOption) (*ValidateAuthorityKeyResponse, error) {
	out := new(ValidateAuthorityKeyResponse)
	err := c.cc.Invoke(ctx, "/pb.AuthorityKeyService/validateAuthorityKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorityKeyServiceServer is the server API for AuthorityKeyService service.
// All implementations must embed UnimplementedAuthorityKeyServiceServer
// for forward compatibility
type AuthorityKeyServiceServer interface {
	// 设置Key
	UpdateAuthorityKey(context.Context, *UpdateAuthorityKeyRequest) (*RPCSuccess, error)
	// 读取Key
	ReadAuthorityKey(context.Context, *ReadAuthorityKeyRequest) (*ReadAuthorityKeyResponse, error)
	// 重置Key
	ResetAuthorityKey(context.Context, *ResetAuthorityKeyRequest) (*RPCSuccess, error)
	// 校验Key
	ValidateAuthorityKey(context.Context, *ValidateAuthorityKeyRequest) (*ValidateAuthorityKeyResponse, error)
}

// UnimplementedAuthorityKeyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorityKeyServiceServer struct {
}

func (UnimplementedAuthorityKeyServiceServer) UpdateAuthorityKey(context.Context, *UpdateAuthorityKeyRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthorityKey not implemented")
}
func (UnimplementedAuthorityKeyServiceServer) ReadAuthorityKey(context.Context, *ReadAuthorityKeyRequest) (*ReadAuthorityKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAuthorityKey not implemented")
}
func (UnimplementedAuthorityKeyServiceServer) ResetAuthorityKey(context.Context, *ResetAuthorityKeyRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetAuthorityKey not implemented")
}
func (UnimplementedAuthorityKeyServiceServer) ValidateAuthorityKey(context.Context, *ValidateAuthorityKeyRequest) (*ValidateAuthorityKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAuthorityKey not implemented")
}

func RegisterAuthorityKeyServiceServer(s grpc.ServiceRegistrar, srv AuthorityKeyServiceServer) {
	s.RegisterService(&AuthorityKeyService_ServiceDesc, srv)
}

func _AuthorityKeyService_UpdateAuthorityKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthorityKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityKeyServiceServer).UpdateAuthorityKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AuthorityKeyService/updateAuthorityKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityKeyServiceServer).UpdateAuthorityKey(ctx, req.(*UpdateAuthorityKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityKeyService_ReadAuthorityKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAuthorityKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityKeyServiceServer).ReadAuthorityKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AuthorityKeyService/readAuthorityKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityKeyServiceServer).ReadAuthorityKey(ctx, req.(*ReadAuthorityKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityKeyService_ResetAuthorityKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetAuthorityKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityKeyServiceServer).ResetAuthorityKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AuthorityKeyService/resetAuthorityKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityKeyServiceServer).ResetAuthorityKey(ctx, req.(*ResetAuthorityKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityKeyService_ValidateAuthorityKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAuthorityKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityKeyServiceServer).ValidateAuthorityKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AuthorityKeyService/validateAuthorityKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityKeyServiceServer).ValidateAuthorityKey(ctx, req.(*ValidateAuthorityKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorityKeyService_ServiceDesc is the grpc.ServiceDesc for AuthorityKeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorityKeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AuthorityKeyService",
	HandlerType: (*AuthorityKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "updateAuthorityKey",
			Handler:    _AuthorityKeyService_UpdateAuthorityKey_Handler,
		},
		{
			MethodName: "readAuthorityKey",
			Handler:    _AuthorityKeyService_ReadAuthorityKey_Handler,
		},
		{
			MethodName: "resetAuthorityKey",
			Handler:    _AuthorityKeyService_ResetAuthorityKey_Handler,
		},
		{
			MethodName: "validateAuthorityKey",
			Handler:    _AuthorityKeyService_ValidateAuthorityKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_authority_key.proto",
}
